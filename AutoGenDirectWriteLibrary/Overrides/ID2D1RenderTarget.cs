// <copyright file="ID2D1RenderTarget.cs" company="Shkyrockett" >
// Copyright © 2020 - 2023 Shkyrockett. All rights reserved.
// </copyright>
// <author id="shkyrockett">Shkyrockett</author>
// <license>
// Licensed under the MIT License. See LICENSE file in the project root for full license information.
// </license>
// <summary></summary>
// <remarks></remarks>

using System.Runtime.InteropServices;
using System.Runtime.Versioning;
using Windows.Win32.Foundation;
using Windows.Win32.Graphics.Direct2D.Common;
using Windows.Win32.Graphics.DirectWrite;
using Windows.Win32.Graphics.Imaging;

namespace Windows.Win32
{
    namespace Graphics.Direct2D
    {
        /// <summary>
        /// Represents an object that can receive drawing commands. Interfaces that inherit
        /// from <see cref="ID2D1RenderTarget" /> render the drawing commands they receive in different
        /// ways. [ID2D1RenderTarget]
        /// </summary>
        /// <remarks>
        /// Override interface for the AutoGenerated one to fix some broken definitions.
        /// </remarks>
        /// <seealso cref="Windows.Win32.Graphics.Direct2D.ID2D1Resource" />
        [Guid("2CD90694-12E2-11DC-9FED-001143A055F9"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown), ComImport()]
        [SupportedOSPlatform("windows6.1")]
        public interface ID2D1RenderTarget
            : ID2D1Resource
        {
            #region ID2D1Resource
            /// <summary>
            /// Retrieves the factory associated with this resource.
            /// </summary>
            /// <param name="factory"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1factory">ID2D1Factory</a>**</b> When this method returns, contains a pointer to a pointer to the factory that created this resource. This parameter is passed uninitialized.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1resource-getfactory#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1resource-getfactory">Learn more about this API from docs.microsoft.com</see>.
            /// </remarks>
            [PreserveSig]
            new void GetFactory(out ID2D1Factory factory);
            #endregion

            #region ID2D1RenderTarget
            /// <summary>
            /// Creates a bitmap that can be used as a target surface, for reading back to the CPU, or as a source for the DrawBitmap and ID2D1BitmapBrush APIs. In addition, color context information can be passed to the bitmap. (overload 2/2)
            /// </summary>
            /// <param name="size"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/Direct2D/d2d1-size-u">D2D1_SIZE_U</a></b> The pixel size of the bitmap to be created.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-createbitmap(d2d1_size_u_constvoid_uint32_constd2d1_bitmap_properties1_id2d1bitmap1)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="srcData">The source data.</param>
            /// <param name="pitch"><para>Type: <b>UINT32</b> The pitch of the source data, if specified.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-createbitmap(d2d1_size_u_constvoid_uint32_constd2d1_bitmap_properties1_id2d1bitmap1)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="bitmapProperties"><para>Type: <b>const <a href="https://learn.microsoft.com/windows/desktop/api/d2d1_1/ns-d2d1_1-d2d1_bitmap_properties1">D2D1_BITMAP_PROPERTIES1</a></b> The properties of the bitmap to be created.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-createbitmap(d2d1_size_u_constvoid_uint32_constd2d1_bitmap_properties1_id2d1bitmap1)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="bitmap"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1bitmap1">ID2D1Bitmap1</a>**</b> When this method returns, contains the address of a pointer to a new bitmap object.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-createbitmap(d2d1_size_u_constvoid_uint32_constd2d1_bitmap_properties1_id2d1bitmap1)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// The new bitmap can be used as a target for <a href="https://learn.microsoft.com/windows/desktop/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-settarget">SetTarget</a> if it is created with <a href="https://learn.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_bitmap_options">D2D1_BITMAP_OPTIONS_TARGET</a>.
            /// </remarks>
            unsafe void CreateBitmap(D2D_SIZE_U size, [Optional] void* srcData, uint pitch, D2D1_BITMAP_PROPERTIES* bitmapProperties, out ID2D1Bitmap bitmap);

            /// <summary>
            /// Creates a Direct2D bitmap by copying a WIC bitmap. (overload 1/2)
            /// </summary>
            /// <param name="wicBitmapSource"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-createbitmapfromwicbitmap(iwicbitmapsource_constd2d1_bitmap_properties1__id2d1bitmap1)">IWICBitmapSource</a>*</b> The WIC bitmap source to copy from.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-createbitmapfromwicbitmap(iwicbitmapsource_constd2d1_bitmap_properties1__id2d1bitmap1)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="bitmapProperties"><para>Type: <b>const <a href="https://learn.microsoft.com/windows/desktop/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-createbitmap(d2d1_size_u_constvoid_uint32_constd2d1_bitmap_properties1_id2d1bitmap1)">D2D1_BITMAP_PROPERTIES1</a></b> A bitmap properties structure that specifies bitmap creation options.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-createbitmapfromwicbitmap(iwicbitmapsource_constd2d1_bitmap_properties1__id2d1bitmap1)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="bitmap"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1bitmap1">ID2D1Bitmap1</a>**</b> The address of the newly created bitmap object.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-createbitmapfromwicbitmap(iwicbitmapsource_constd2d1_bitmap_properties1__id2d1bitmap1)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-createbitmapfromwicbitmap(iwicbitmapsource_constd2d1_bitmap_properties1__id2d1bitmap1)">Learn more about this API from docs.microsoft.com</see>.
            /// </remarks>
            unsafe void CreateBitmapFromWicBitmap(IWICBitmapSource wicBitmapSource, [Optional] D2D1_BITMAP_PROPERTIES* bitmapProperties, out ID2D1Bitmap bitmap);

            /// <summary>
            /// Creates an ID2D1Bitmap whose data is shared with another resource.
            /// </summary>
            /// <param name="riid"><para>Type: <b>REFIID</b> The interface ID of the object supplying the source data.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-createsharedbitmap#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="data"><para>Type: <b>void*</b> An <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1bitmap">ID2D1Bitmap</a>, <a href="https://learn.microsoft.com/windows/win32/api/dxgi/nn-dxgi-idxgisurface">IDXGISurface</a>, or an <a href="https://learn.microsoft.com/windows/win32/api/wincodec/nn-wincodec-iwicbitmaplock">IWICBitmapLock</a> that contains the data to share with the new <b>ID2D1Bitmap</b>. For more information, see the Remarks section.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-createsharedbitmap#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="bitmapProperties"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/ns-d2d1-d2d1_bitmap_properties">D2D1_BITMAP_PROPERTIES</a>*</b> The pixel format  and DPI of the bitmap to create . The <a href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> portion of the pixel format  must match the <a href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> of <i>data</i> or the method will fail, but the alpha modes don't have to match. To prevent a  mismatch, you can pass <b>NULL</b> or the value obtained from the <a href="https://learn.microsoft.com/windows/win32/api/d2d1helper/nf-d2d1helper-pixelformat">D2D1::PixelFormat</a> helper function. The DPI settings do not have to match those of <i>data</i>. If both <i>dpiX</i> and <i>dpiY</i> are  0.0f, the DPI of the render target is used.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-createsharedbitmap#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="bitmap"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1bitmap">ID2D1Bitmap</a>**</b> When this method returns, contains the address of a pointer to the new bitmap. This parameter is passed uninitialized.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-createsharedbitmap#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <returns>
            /// Type: <b><a href="https://learn.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> If this method succeeds, it returns <b xmlns:loc="http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an [**HRESULT**](/windows/desktop/com/structure-of-com-error-codes) error code.
            /// </returns>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-createsharedbitmap">Learn more about this API from learn.microsoft.com</see>.
            /// </remarks>
            unsafe void CreateSharedBitmap(Guid* riid, void* data, [Optional] D2D1_BITMAP_PROPERTIES* bitmapProperties, out ID2D1Bitmap bitmap);

            /// <summary>
            /// Creates a bitmap brush. The bitmap is scaled, rotated, skewed or tiled to fill
            /// or pen a geometry.
            /// </summary>
            /// <param name="bitmap"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1bitmap">ID2D1Bitmap</a>*</b> The bitmap to use as the brush.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-createbitmapbrush(id2d1bitmap_constd2d1_bitmap_brush_properties1__id2d1bitmapbrush1)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="bitmapBrushProperties"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/d2d1_1/ns-d2d1_1-d2d1_bitmap_brush_properties1">D2D1_BITMAP_BRUSH_PROPERTIES1</a>*</b> A bitmap brush properties structure.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-createbitmapbrush(id2d1bitmap_constd2d1_bitmap_brush_properties1__id2d1bitmapbrush1)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="brushProperties">The brush properties.</param>
            /// <param name="bitmapBrush"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1bitmapbrush1">ID2D1BitmapBrush1</a>**</b> The address of the newly created bitmap brush object.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-createbitmapbrush(id2d1bitmap_constd2d1_bitmap_brush_properties1__id2d1bitmapbrush1)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-createbitmapbrush(id2d1bitmap_constd2d1_bitmap_brush_properties1__id2d1bitmapbrush1)">Learn more about this API from docs.microsoft.com</see>.
            /// </remarks>
            unsafe void CreateBitmapBrush(ID2D1Bitmap bitmap, [Optional] D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties, [Optional] D2D1_BRUSH_PROPERTIES* brushProperties, out ID2D1BitmapBrush bitmapBrush);

            /// <summary>
            /// Creates the solid color brush.
            /// </summary>
            /// <param name="color">The color.</param>
            /// <param name="brushProperties">The brush properties.</param>
            /// <param name="solidColorBrush">The solid color brush.</param>
            unsafe void CreateSolidColorBrush(D2D1_COLOR_F* color, [Optional] D2D1_BRUSH_PROPERTIES* brushProperties, out ID2D1SolidColorBrush solidColorBrush);

            /// <summary>
            /// Creates a gradient stop collection, enabling the gradient to contain color channels with values outside of [0,1] and also enabling rendering to a high-color render target with interpolation in sRGB space.
            /// </summary>
            /// <param name="gradientStops">The gradient stops.</param>
            /// <param name="gradientStopsCount">The gradient stops count.</param>
            /// <param name="colorInterpolationGamma">The color interpolation gamma.</param>
            /// <param name="extendMode"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/d2d1/ne-d2d1-d2d1_extend_mode">D2D1_EXTEND_MODE</a></b> Defines how colors outside of the range defined by the stop collection are determined.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="gradientStopCollection">The gradient stop collection.</param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection">Learn more about this API from learn.microsoft.com</see>.
            /// </remarks>
            unsafe void CreateGradientStopCollection(D2D1_GRADIENT_STOP* gradientStops, uint gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, out ID2D1GradientStopCollection gradientStopCollection);

            /// <summary>
            /// Creates the linear gradient brush stub.
            /// </summary>
            /// <param name="linearGradientBrushProperties">The linear gradient brush properties.</param>
            /// <param name="brushProperties">The brush properties.</param>
            /// <param name="gradientStopCollection">The gradient stop collection.</param>
            /// <param name="linearGradientBrush">The linear gradient brush.</param>
            unsafe void CreateLinearGradientBrush(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties, [Optional] D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection gradientStopCollection, out ID2D1LinearGradientBrush linearGradientBrush);

            /// <summary>
            /// Creates the radial gradient brush.
            /// </summary>
            /// <param name="radialGradientBrushProperties">The radial gradient brush properties.</param>
            /// <param name="brushProperties">The brush properties.</param>
            /// <param name="gradientStopCollection">The gradient stop collection.</param>
            /// <param name="radialGradientBrush">The radial gradient brush.</param>
            unsafe void CreateRadialGradientBrush(D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties, [Optional] D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection gradientStopCollection, out ID2D1RadialGradientBrush radialGradientBrush);

            /// <summary>
            /// Creates a bitmap render target whose bitmap can be used as a source for
            /// rendering in the API.
            /// </summary>
            /// <param name="desiredSize">Size of the desired.</param>
            /// <param name="desiredPixelSize">Size of the desired pixel.</param>
            /// <param name="desiredFormat">The desired format.</param>
            /// <param name="options">The options.</param>
            /// <param name="bitmapRenderTarget">The bitmap render target.</param>
            unsafe void CreateCompatibleRenderTarget([Optional] D2D_SIZE_F* desiredSize, [Optional] D2D_SIZE_U* desiredPixelSize, [Optional] D2D1_PIXEL_FORMAT* desiredFormat, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, out ID2D1BitmapRenderTarget bitmapRenderTarget);

            /// <summary>
            /// Creates a layer resource that can be used on any target and which will resize
            /// under the covers if necessary.
            /// </summary>
            /// <param name="size">The size.</param>
            /// <param name="layer">The layer.</param>
            unsafe void CreateLayer([Optional] D2D_SIZE_F* size, out ID2D1Layer layer);

            /// <summary>
            /// Create a mesh that uses triangles to describe a shape.
            /// </summary>
            /// <param name="mesh"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1mesh">ID2D1Mesh</a>**</b> When this method returns, contains a pointer to a pointer to the new mesh.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-createmesh#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <returns>
            /// Type: <b><a href="https://learn.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> If this method succeeds, it returns <b xmlns:loc="http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an [**HRESULT**](/windows/desktop/com/structure-of-com-error-codes) error code.
            /// </returns>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-createmesh">Learn more about this API from learn.microsoft.com</see>.
            /// </remarks>
            void CreateMesh(out ID2D1Mesh mesh);

            /// <summary>
            /// Draws a line between the specified points using the specified stroke style.
            /// </summary>
            /// <param name="point0"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b> The start point of the line, in device-independent pixels.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawline#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="point1"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b> The end point of the line, in device-independent pixels.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawline#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="brush"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The brush used to paint the line's stroke.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawline#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="strokeWidth"><para>Type: <b>FLOAT</b> The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawline#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="strokeStyle"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1strokestyle">ID2D1StrokeStyle</a>*</b> The style of stroke to paint, or <b>NULL</b> to paint a solid line.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawline#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <remarks>
            /// <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>DrawLine</b>) failed, check the result returned by the <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawline#">Read more on learn.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            void DrawLine(D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);

            /// <summary>
            /// Draws the rectangle.
            /// </summary>
            /// <param name="rect">The rect.</param>
            /// <param name="brush">The brush.</param>
            /// <param name="strokeWidth">Width of the stroke.</param>
            /// <param name="strokeStyle">The stroke style.</param>
            [PreserveSig]
            unsafe void DrawRectangle(D2D_RECT_F* rect, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);

            /// <summary>
            /// Fills the rectangle.
            /// </summary>
            /// <param name="rect">The rect.</param>
            /// <param name="brush">The brush.</param>
            [PreserveSig]
            unsafe void FillRectangle(D2D_RECT_F* rect, ID2D1Brush brush);

            /// <summary>
            /// Draws the rounded rectangle.
            /// </summary>
            /// <param name="roundedRect">The rounded rect.</param>
            /// <param name="brush">The brush.</param>
            /// <param name="strokeWidth">Width of the stroke.</param>
            /// <param name="strokeStyle">The stroke style.</param>
            [PreserveSig]
            unsafe void DrawRoundedRectangle(D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);

            /// <summary>
            /// Fills the rounded rectangle.
            /// </summary>
            /// <param name="roundedRect">The rounded rect.</param>
            /// <param name="brush">The brush.</param>
            [PreserveSig]
            unsafe void FillRoundedRectangle(D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush brush);

            /// <summary>
            /// Draws the ellipse.
            /// </summary>
            /// <param name="ellipse">The ellipse.</param>
            /// <param name="brush">The brush.</param>
            /// <param name="strokeWidth">Width of the stroke.</param>
            /// <param name="strokeStyle">The stroke style.</param>
            [PreserveSig]
            unsafe void DrawEllipse(D2D1_ELLIPSE* ellipse, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);

            /// <summary>
            /// Fills the ellipse.
            /// </summary>
            /// <param name="ellipse">The ellipse.</param>
            /// <param name="brush">The brush.</param>
            [PreserveSig]
            unsafe void FillEllipse(D2D1_ELLIPSE* ellipse, ID2D1Brush brush);

            /// <summary>
            /// Draws the outline of the specified geometry using the specified stroke style.
            /// </summary>
            /// <param name="geometry"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1geometry">ID2D1Geometry</a>*</b> The geometry to draw.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawgeometry#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="brush"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The brush used to paint the geometry's stroke.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawgeometry#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="strokeWidth"><para>Type: <b>FLOAT</b> The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawgeometry#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="strokeStyle"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1strokestyle">ID2D1StrokeStyle</a>*</b> The style of stroke to apply to the geometry's outline, or <b>NULL</b> to paint a solid stroke.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawgeometry#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <remarks>
            /// <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>DrawGeometry</b>) failed, check the result returned by the <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawgeometry#">Read more on learn.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            void DrawGeometry(ID2D1Geometry geometry, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);

            /// <summary>
            /// Paints the interior of the specified geometry.
            /// </summary>
            /// <param name="geometry"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1geometry">ID2D1Geometry</a>*</b> The geometry to paint.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-fillgeometry#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="brush"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The brush used to paint the geometry's interior.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-fillgeometry#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="opacityBrush"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The opacity mask to apply to the geometry, or <b>NULL</b> for no opacity mask. If an opacity mask (the <i>opacityBrush</i> parameter) is specified, <i>brush</i> must be an <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1bitmapbrush">ID2D1BitmapBrush</a> that has   its x- and y-extend modes set to <a href="https://learn.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_extend_mode">D2D1_EXTEND_MODE_CLAMP</a>. For more information, see the Remarks section.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-fillgeometry#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <remarks>
            /// <para>If the <i>opacityBrush</i> parameter is not <b>NULL</b>, the alpha value of each pixel of the mapped <i>opacityBrush</i> is used to determine the resulting opacity of each corresponding pixel of the geometry. Only the alpha value of each color in the brush is used for this processing; all other color information is ignored. The alpha value specified by the brush is multiplied by the alpha value of the geometry after the geometry has been painted by <i>brush</i>.</para>
            /// <para>When this method fails, it does not return an error code. To determine whether a drawing operation (such as <b>FillGeometry</b>) failed, check the result returned by the <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> method.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-fillgeometry#">Read more on learn.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            void FillGeometry(ID2D1Geometry geometry, ID2D1Brush brush, ID2D1Brush opacityBrush);

            /// <summary>
            /// Paints the interior of the specified mesh.
            /// </summary>
            /// <param name="mesh"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1mesh">ID2D1Mesh</a>*</b> The mesh to paint.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-fillmesh#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="brush"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The brush used to paint the mesh.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-fillmesh#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <remarks>
            /// <para>The current antialias mode of the render target must be <a href="https://learn.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_antialias_mode">D2D1_ANTIALIAS_MODE_ALIASED</a> when <b>FillMesh</b> is called. To change the render target's antialias mode, use the <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-setantialiasmode">SetAntialiasMode</a> method. <b>FillMesh</b> does not expect a particular winding order for the triangles in the <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1mesh">ID2D1Mesh</a>; both clockwise and counter-clockwise will work. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>FillMesh</b>) failed, check the result returned by the <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-fillmesh#">Read more on learn.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            void FillMesh(ID2D1Mesh mesh, ID2D1Brush brush);

            /// <summary>
            /// Fill using the alpha channel of the supplied opacity mask bitmap. The brush
            /// opacity will be modulated by the mask. The render target anti-aliasing mode must
            /// be set to aliased.
            /// </summary>
            /// <param name="opacityMask"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1bitmap">ID2D1Bitmap</a>*</b> The bitmap that acts as the opacity mask</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-fillopacitymask(id2d1bitmap_id2d1brush_constd2d1_rect_f__constd2d1_rect_f)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="brush"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The brush to use for filling the primitive.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-fillopacitymask(id2d1bitmap_id2d1brush_constd2d1_rect_f__constd2d1_rect_f)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="content">The content.</param>
            /// <param name="destinationRectangle"><para>Type: <b>const <a href="https://learn.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a></b> The destination rectangle to output to in the render target</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-fillopacitymask(id2d1bitmap_id2d1brush_constd2d1_rect_f__constd2d1_rect_f)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="sourceRectangle"><para>Type: <b>const <a href="https://learn.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b> The source rectangle from the opacity mask bitmap.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-fillopacitymask(id2d1bitmap_id2d1brush_constd2d1_rect_f__constd2d1_rect_f)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-fillopacitymask(id2d1bitmap_id2d1brush_constd2d1_rect_f__constd2d1_rect_f)">Learn more about this API from docs.microsoft.com</see>.
            /// </remarks>
            [PreserveSig]
            unsafe void FillOpacityMask(ID2D1Bitmap opacityMask, ID2D1Brush brush, D2D1_OPACITY_MASK_CONTENT content, [Optional] D2D_RECT_F* destinationRectangle, [Optional] D2D_RECT_F* sourceRectangle);

            /// <summary>
            /// Draws a bitmap to the render target. (overload 2/5)
            /// </summary>
            /// <param name="bitmap"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1bitmap">ID2D1Bitmap</a>*</b> The bitmap to draw.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-drawbitmap(id2d1bitmap_constd2d1_rect_f__float_d2d1_interpolation_mode_constd2d1_rect_f__constd2d1_matrix_4x4_f_)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="destinationRectangle"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b> The destination rectangle. The default is the size of the bitmap and the location is the upper left corner of the render target.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-drawbitmap(id2d1bitmap_constd2d1_rect_f__float_d2d1_interpolation_mode_constd2d1_rect_f__constd2d1_matrix_4x4_f_)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="opacity"><para>Type: <b>FLOAT</b> The opacity of the bitmap.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-drawbitmap(id2d1bitmap_constd2d1_rect_f__float_d2d1_interpolation_mode_constd2d1_rect_f__constd2d1_matrix_4x4_f_)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="interpolationMode"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_interpolation_mode">D2D1_INTERPOLATION_MODE</a></b> The interpolation mode to use.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-drawbitmap(id2d1bitmap_constd2d1_rect_f__float_d2d1_interpolation_mode_constd2d1_rect_f__constd2d1_matrix_4x4_f_)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="sourceRectangle"><para>Type: <b>const <a href="https://learn.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a></b> An optional source rectangle.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-drawbitmap(id2d1bitmap_constd2d1_rect_f__float_d2d1_interpolation_mode_constd2d1_rect_f__constd2d1_matrix_4x4_f_)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <remarks>
            /// <para>The destinationRectangle parameter defines the rectangle in the target where the bitmap will appear (in device-independent pixels (DIPs)).  This is affected by the currently set transform and the perspective transform, if set.  If NULL is specified, then the destination rectangle is (left=0, top=0, right = width(sourceRectangle), bottom = height(sourceRectangle)).</para>
            /// <para>The <i>sourceRectangle</i> parameter defines the sub-rectangle of the source bitmap (in DIPs).  <b>DrawBitmap</b> will clip this rectangle to the size of the source bitmap, thus making it impossible to sample outside of the bitmap.  If NULL is specified, then the source rectangle is taken to be the size of the source bitmap.</para>
            /// <para>If you specify <i>perspectiveTransform</i> it is applied to the rect in addition to the transform set on the render target.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-drawbitmap(id2d1bitmap_constd2d1_rect_f__float_d2d1_interpolation_mode_constd2d1_rect_f__constd2d1_matrix_4x4_f_)#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            unsafe void DrawBitmap(ID2D1Bitmap bitmap, [Optional] D2D_RECT_F* destinationRectangle, float opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, [Optional] D2D_RECT_F* sourceRectangle);

            /// <summary>
            /// Draws the text within the given layout rectangle and by default also performs
            /// baseline snapping.
            /// </summary>
            /// <param name="string">The string.</param>
            /// <param name="stringLength"><para>Type: <b>UINT32</b> The number of characters in string.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_3/nf-d2d1_3-id2d1devicecontext4-drawtext(constwchar_uint32_idwritetextformat_constd2d1_rect_f__id2d1brush_id2d1svgglyphstyle_uint32_d2d1_draw_text_options_dwrite_measuring_mode)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="textFormat"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/dwrite/nn-dwrite-idwritetextformat">IDWriteTextFormat</a>*</b> An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_3/nf-d2d1_3-id2d1devicecontext4-drawtext(constwchar_uint32_idwritetextformat_constd2d1_rect_f__id2d1brush_id2d1svgglyphstyle_uint32_d2d1_draw_text_options_dwrite_measuring_mode)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="layoutRect"><para>Type: <b>const <a href="https://learn.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a></b> The size and position of the area in which the text is drawn.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_3/nf-d2d1_3-id2d1devicecontext4-drawtext(constwchar_uint32_idwritetextformat_constd2d1_rect_f__id2d1brush_id2d1svgglyphstyle_uint32_d2d1_draw_text_options_dwrite_measuring_mode)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="defaultFillBrush"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The brush used to paint the text.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_3/nf-d2d1_3-id2d1devicecontext4-drawtext(constwchar_uint32_idwritetextformat_constd2d1_rect_f__id2d1brush_id2d1svgglyphstyle_uint32_d2d1_draw_text_options_dwrite_measuring_mode)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="options"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/d2d1/ne-d2d1-d2d1_draw_text_options">D2D1_DRAW_TEXT_OPTIONS</a></b> A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <a href="https://learn.microsoft.com/windows/desktop/api/d2d1/ne-d2d1-d2d1_draw_text_options">D2D1_DRAW_TEXT_OPTIONS_NONE</a>, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_3/nf-d2d1_3-id2d1devicecontext4-drawtext(constwchar_uint32_idwritetextformat_constd2d1_rect_f__id2d1brush_id2d1svgglyphstyle_uint32_d2d1_draw_text_options_dwrite_measuring_mode)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="measuringMode"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/dcommon/ne-dcommon-dwrite_measuring_mode">DWRITE_MEASURING_MODE</a></b> A value that indicates how glyph metrics are used to measure text when it is formatted. The default value is <a href="https://learn.microsoft.com/windows/desktop/api/dcommon/ne-dcommon-dwrite_measuring_mode">DWRITE_MEASURING_MODE_NATURAL</a>.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_3/nf-d2d1_3-id2d1devicecontext4-drawtext(constwchar_uint32_idwritetextformat_constd2d1_rect_f__id2d1brush_id2d1svgglyphstyle_uint32_d2d1_draw_text_options_dwrite_measuring_mode)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_3/nf-d2d1_3-id2d1devicecontext4-drawtext(constwchar_uint32_idwritetextformat_constd2d1_rect_f__id2d1brush_id2d1svgglyphstyle_uint32_d2d1_draw_text_options_dwrite_measuring_mode)">Learn more about this API from docs.microsoft.com</see>.
            /// </remarks>
            [PreserveSig]
            unsafe void DrawText(PCWSTR @string, uint stringLength, IDWriteTextFormat textFormat, D2D_RECT_F* layoutRect, ID2D1Brush defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode);

            /// <summary>
            /// Draws the formatted text described by the specified IDWriteTextLayout object.
            /// </summary>
            /// <param name="origin"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b> The point, described in device-independent pixels, at which the upper-left corner of the text described by <i>textLayout</i> is drawn.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawtextlayout#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="textLayout"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritetextlayout">IDWriteTextLayout</a>*</b> The formatted text to draw. Any drawing effects that do not inherit from <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1resource">ID2D1Resource</a> are ignored. If there are drawing effects that inherit from <b>ID2D1Resource</b> that are not brushes, this method fails and the render target is put in an error state.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawtextlayout#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="defaultFillBrush"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The brush used to paint any text in <i>textLayout</i> that does not already have a brush associated with it as a drawing effect (specified by the <a href="https://learn.microsoft.com/windows/win32/api/dwrite/nf-dwrite-idwritetextlayout-setdrawingeffect">IDWriteTextLayout::SetDrawingEffect</a> method).</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawtextlayout#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="options"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_draw_text_options">D2D1_DRAW_TEXT_OPTIONS</a></b> A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <a href="https://learn.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_draw_text_options">D2D1_DRAW_TEXT_OPTIONS_NONE</a>, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawtextlayout#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <remarks>
            /// <para>When drawing the same text repeatedly, using the <b>DrawTextLayout</b> method is more efficient than using the <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawtext(constwchar_uint32_idwritetextformat_constd2d1_rect_f__id2d1brush_d2d1_draw_text_options_dwrite_measuring_mode)">DrawText</a> method because the text doesn't need to be formatted and the layout processed with each call. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>DrawTextLayout</b>) failed, check the result returned by the <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawtextlayout#">Read more on learn.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            void DrawTextLayout(D2D_POINT_2F origin, IDWriteTextLayout textLayout, ID2D1Brush defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options);

            /// <summary>
            /// Draws a series of glyphs to the device context.
            /// </summary>
            /// <param name="baselineOrigin"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b> Origin of first glyph in the series.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="glyphRun"><para>Type: <b>const <a href="https://learn.microsoft.com/windows/desktop/api/dwrite/ns-dwrite-dwrite_glyph_run">DWRITE_GLYPH_RUN</a>*</b> The glyphs to render.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="foregroundBrush"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The brush that defines the text color.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="measuringMode"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/dcommon/ne-dcommon-dwrite_measuring_mode">DWRITE_MEASURING_MODE</a></b> The measuring mode of the glyph series, used to determine the advances and offsets. The default value is DWRITE_MEASURING_MODE_NATURAL.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <remarks>
            /// The <i>glyphRunDescription</i> is ignored when rendering, but can be useful for printing and serialization of rendering commands, such as to an XPS or SVG file. This extends <a href="https://learn.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-drawglyphrun">ID2D1RenderTarget::DrawGlyphRun</a>, which lacked the glyph run description.
            /// </remarks>
            [PreserveSig]
            void DrawGlyphRun(D2D_POINT_2F baselineOrigin, in DWRITE_GLYPH_RUN glyphRun, ID2D1Brush foregroundBrush, DWRITE_MEASURING_MODE measuringMode);

            /// <summary>
            /// Sets the transform.
            /// </summary>
            /// <param name="transform">The transform.</param>
            [PreserveSig]
            unsafe void SetTransform(D2D_MATRIX_3X2_F* transform);

            /// <summary>
            /// Gets the current transform of the render target.
            /// </summary>
            /// <param name="transform"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/Direct2D/d2d1-matrix-3x2-f">D2D1_MATRIX_3X2_F</a>*</b> When this returns, contains the current transform of the render target. This parameter is passed uninitialized.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-gettransform#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-gettransform">Learn more about this API from learn.microsoft.com</see>.
            /// </remarks>
            [PreserveSig]
            unsafe void GetTransform(D2D_MATRIX_3X2_F* transform);

            /// <summary>
            /// Sets the antialiasing mode of the render target. The antialiasing mode applies to all subsequent drawing operations, excluding text and glyph drawing operations.
            /// </summary>
            /// <param name="antialiasMode"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_antialias_mode">D2D1_ANTIALIAS_MODE</a></b> The antialiasing mode for future drawing operations.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-setantialiasmode#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <remarks>
            /// <para>To specify the antialiasing mode for text and glyph operations, use the <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-settextantialiasmode">SetTextAntialiasMode</a> method.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-setantialiasmode#">Read more on learn.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            void SetAntialiasMode(D2D1_ANTIALIAS_MODE antialiasMode);

            /// <summary>
            /// Retrieves the current antialiasing mode for non-text drawing operations.
            /// </summary>
            /// <returns>
            /// Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_antialias_mode">D2D1_ANTIALIAS_MODE</a></b> The current antialiasing mode for non-text drawing operations.
            /// </returns>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-getantialiasmode">Learn more about this API from learn.microsoft.com</see>.
            /// </remarks>
            [PreserveSig]
            D2D1_ANTIALIAS_MODE GetAntialiasMode();

            /// <summary>
            /// Specifies the antialiasing mode to use for subsequent text and glyph drawing operations.
            /// </summary>
            /// <param name="textAntialiasMode"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_text_antialias_mode">D2D1_TEXT_ANTIALIAS_MODE</a></b> The antialiasing mode to use for subsequent text and glyph drawing operations.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-settextantialiasmode#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-settextantialiasmode">Learn more about this API from learn.microsoft.com</see>.
            /// </remarks>
            [PreserveSig]
            void SetTextAntialiasMode(D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode);

            /// <summary>
            /// Gets the current antialiasing mode for text and glyph drawing operations.
            /// </summary>
            /// <returns>
            /// Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_text_antialias_mode">D2D1_TEXT_ANTIALIAS_MODE</a></b> The current antialiasing mode for text and glyph drawing operations.
            /// </returns>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-gettextantialiasmode">Learn more about this API from learn.microsoft.com</see>.
            /// </remarks>
            [PreserveSig]
            D2D1_TEXT_ANTIALIAS_MODE GetTextAntialiasMode();

            /// <summary>
            /// Specifies text rendering options to be applied to all subsequent text and glyph drawing operations.
            /// </summary>
            /// <param name="textRenderingParams"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwriterenderingparams">IDWriteRenderingParams</a>*</b> The text rendering options to be applied to all subsequent text and glyph drawing operations; <b>NULL</b> to clear current text rendering options.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-settextrenderingparams#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <remarks>
            /// <para>If the settings specified by  <i>textRenderingParams</i> are incompatible with the render target's text antialiasing mode (specified by <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-settextantialiasmode">SetTextAntialiasMode</a>), subsequent text and glyph drawing operations will fail and put the render target into an error state.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-settextrenderingparams#">Read more on learn.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            void SetTextRenderingParams(IDWriteRenderingParams textRenderingParams);

            /// <summary>
            /// Retrieves the render target's current text rendering options.
            /// </summary>
            /// <param name="textRenderingParams"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwriterenderingparams">IDWriteRenderingParams</a>**</b> When this method returns, <i>textRenderingParams</i>contains the address  of a pointer to the render target's current text rendering options.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-gettextrenderingparams#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <remarks>
            /// <para>If the settings specified by  <i>textRenderingParams</i> are incompatible with the render target's text antialiasing mode (specified by <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-settextantialiasmode">SetTextAntialiasMode</a>), subsequent text and glyph drawing operations will fail and put the render target into an error state.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-gettextrenderingparams#">Read more on learn.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            void GetTextRenderingParams(out IDWriteRenderingParams textRenderingParams);

            /// <summary>
            /// Specifies a label for subsequent drawing operations.
            /// </summary>
            /// <param name="tag1"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a></b> A label to apply to subsequent drawing operations.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-settags#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="tag2"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a></b> A label to apply to subsequent drawing operations.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-settags#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <remarks>
            /// <para>The labels specified by this method are printed by debug error messages. If no tag is set, the default value for each tag is 0.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-settags#">Read more on learn.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            void SetTags(ulong tag1, ulong tag2);

            /// <summary>
            /// Gets the label for subsequent drawing operations.
            /// </summary>
            /// <param name="tag1"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b> When this method returns, contains the first label for subsequent drawing operations. This parameter is passed uninitialized. If <b>NULL</b> is specified, no value is retrieved for this parameter.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-gettags#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="tag2"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b> When this method returns, contains the second label for subsequent drawing operations. This parameter is passed uninitialized. If <b>NULL</b> is specified, no value is retrieved for this parameter.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-gettags#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <remarks>
            /// <para>If the same address is passed for both parameters, both parameters receive the value of the second tag.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-gettags#">Read more on learn.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            void GetTags(out ulong tag1, out ulong tag2);

            /// <summary>
            /// Start a layer of drawing calls. The way in which the layer must be resolved is
            /// specified first as well as the logical resource that stores the layer
            /// parameters. The supplied layer resource might grow if the specified content
            /// cannot fit inside it. The layer will grow monotonically on each axis.  If a NULL
            /// ID2D1Layer is provided, then a layer resource will be allocated automatically.
            /// </summary>
            /// <param name="layerParameters"><para>Type: <b>const <a href="https://learn.microsoft.com/windows/desktop/api/d2d1_1/ns-d2d1_1-d2d1_layer_parameters1">D2D1_LAYER_PARAMETERS1</a>*</b> The parameters that defines the layer.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-pushlayer(constd2d1_layer_parameters1_id2d1layer)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <param name="layer"><para>Type: <b><a href="https://learn.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1layer">ID2D1Layer</a>*</b> The layer resource to push on the device context that receives subsequent drawing operations. <div class="alert"><b>Note</b>  If a layer is not specified, Direct2D manages the layer resource automatically.</div><div> </div></para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-pushlayer(constd2d1_layer_parameters1_id2d1layer)#parameters">Read more on docs.microsoft.com</see>.</para></param>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-pushlayer(constd2d1_layer_parameters1_id2d1layer)">Learn more about this API from docs.microsoft.com</see>.
            /// </remarks>
            [PreserveSig]
            void PushLayer(in D2D1_LAYER_PARAMETERS layerParameters, ID2D1Layer layer);

            /// <summary>
            /// Stops redirecting drawing operations to the layer that is specified by the last PushLayer call.
            /// </summary>
            /// <remarks>
            /// <para>A <b>PopLayer</b>  must match a previous <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-pushlayer(constd2d1_layer_parameters__id2d1layer)">PushLayer</a> call. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>PopLayer</b>) failed, check the result returned by the <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-poplayer#">Read more on learn.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            void PopLayer();

            /// <summary>
            /// Executes all pending drawing commands.
            /// </summary>
            /// <param name="tag1"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b> When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="tag2"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b> When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <returns>
            /// Type: <b><a href="https://learn.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> If the method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code and sets <i>tag1</i> and <i>tag2</i> to the tags that were active when the error occurred. If no error occurred, this method sets the error tag state to be (0,0).
            /// </returns>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">Learn more about this API from learn.microsoft.com</see>.
            /// </remarks>
            void Flush(out ulong tag1, out ulong tag2);

            /// <summary>
            /// Saves the current drawing state to the specified ID2D1DrawingStateBlock.
            /// </summary>
            /// <param name="drawingStateBlock"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1drawingstateblock">ID2D1DrawingStateBlock</a>*</b> When this method returns, contains the current drawing state of the render target. This parameter must be initialized before passing it to the method.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-savedrawingstate#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-savedrawingstate">Learn more about this API from learn.microsoft.com</see>.
            /// </remarks>
            [PreserveSig]
            void SaveDrawingState(ID2D1DrawingStateBlock drawingStateBlock);

            /// <summary>
            /// Sets the render target's drawing state to that of the specified ID2D1DrawingStateBlock.
            /// </summary>
            /// <param name="drawingStateBlock"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1drawingstateblock">ID2D1DrawingStateBlock</a>*</b> The new drawing state of the render target.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-restoredrawingstate#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-restoredrawingstate">Learn more about this API from learn.microsoft.com</see>.
            /// </remarks>
            [PreserveSig]
            void RestoreDrawingState(ID2D1DrawingStateBlock drawingStateBlock);

            /// <summary>
            /// Pushes a clip. The clip can be anti-aliased. The clip must be axis aligned. If
            /// the current world transform is not axis preserving, then the bounding box of the
            /// transformed clip rect will be used. The clip will remain in effect until a
            /// PopAxisAligned clip call is made.
            /// </summary>
            /// <param name="clipRect">The clip rect.</param>
            /// <param name="antialiasMode">The anti-alias mode.</param>
            [PreserveSig]
            unsafe void PushAxisAlignedClip(D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode);

            /// <summary>
            /// Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.
            /// </summary>
            /// <remarks>
            /// <para>A <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-pushaxisalignedclip(constd2d1_rect_f__d2d1_antialias_mode)">PushAxisAlignedClip</a>/<b>PopAxisAlignedClip</b> pair can occur around or within a <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-pushlayer(constd2d1_layer_parameters__id2d1layer)">PushLayer</a>/<a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-poplayer">PopLayer</a> pair, but may not overlap. For example, a <b>PushAxisAlignedClip</b>, <b>PushLayer</b>, <b>PopLayer</b>, <b>PopAxisAlignedClip</b>  sequence is valid, but a <b>PushAxisAlignedClip</b>, <b>PushLayer</b>, <b>PopAxisAlignedClip</b>, <b>PopLayer</b> sequence is not. <b>PopAxisAlignedClip</b> must be called once for every call to <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-pushaxisalignedclip(constd2d1_rect_f__d2d1_antialias_mode)">PushAxisAlignedClip</a>. For an example, see <a href="https://learn.microsoft.com/windows/win32/Direct2D/how-to-clip-with-axis-aligned-rects">How to Clip with an Axis-Aligned Clip Rectangle</a>. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>PopAxisAlignedClip</b>) failed, check the result returned by the <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-popaxisalignedclip#">Read more on learn.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            void PopAxisAlignedClip();

            /// <summary>
            /// Clears the specified clear color.
            /// </summary>
            /// <param name="clearColor">Color of the clear.</param>
            [PreserveSig]
            unsafe void Clear([Optional] D2D1_COLOR_F* clearColor);

            /// <summary>
            /// Initiates drawing on this render target.
            /// </summary>
            /// <remarks>
            /// <para>Drawing operations can only be issued between a <b>BeginDraw</b> and <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> call. BeginDraw and EndDraw are used to indicate that a render target is in use by the Direct2D system. Different implementations of <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1rendertarget">ID2D1RenderTarget</a> might behave differently when <b>BeginDraw</b> is called. An <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1bitmaprendertarget">ID2D1BitmapRenderTarget</a> may be locked between <b>BeginDraw</b>/<a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> calls, a DXGI surface render target might be acquired on <b>BeginDraw</b> and released on <b>EndDraw</b>, while an <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1hwndrendertarget">ID2D1HwndRenderTarget</a> may begin batching at <b>BeginDraw</b> and may present on <b>EndDraw</b>, for example. The BeginDraw method must be called before rendering operations can be called, though state-setting and state-retrieval operations can be performed even outside of <b>BeginDraw</b>/<a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a>. After <b>BeginDraw</b> is called, a render target will normally build up a batch of rendering commands, but defer processing of these commands until either an internal buffer is full, the <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">Flush</a> method is called, or until <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> is called. The <b>EndDraw</b> method causes any batched drawing operations to complete, and then returns an HRESULT indicating the success of the operations and, optionally, the tag state of the render target at the time the error occurred. The <b>EndDraw</b> method always succeeds: it should not be called twice even if a previous <b>EndDraw</b> resulted in a failing HRESULT. If <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> is called without a matched call to <b>BeginDraw</b>, it returns an error indicating that <b>BeginDraw</b> must be called before <b>EndDraw</b>. Calling <b>BeginDraw</b> twice on a render target puts the target into an error state where nothing further is drawn, and returns an appropriate HRESULT and error information when <b>EndDraw</b> is called.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-begindraw#">Read more on learn.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            void BeginDraw();

            /// <summary>
            /// Ends drawing operations on the render target and indicates the current error state and associated tags.
            /// </summary>
            /// <param name="tag1"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b> When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="tag2"><para>Type: <b><a href="https://learn.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b> When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <returns>
            /// Type: <b><a href="https://learn.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> If the method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code and sets <i>tag1</i> and <i>tag2</i> to the tags that were active when the error occurred.
            /// </returns>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">Learn more about this API from learn.microsoft.com</see>.
            /// </remarks>
            [PreserveSig]
            HRESULT EndDraw(out ulong tag1, out ulong tag2);

            /// <summary>
            /// Retrieves the pixel format and alpha mode of the render target.
            /// </summary>
            /// <returns>
            /// Type: <b><a href="https://learn.microsoft.com/windows/win32/api/dcommon/ns-dcommon-d2d1_pixel_format">D2D1_PIXEL_FORMAT</a></b> The pixel format and alpha mode of the render target.
            /// </returns>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-getpixelformat">Learn more about this API from learn.microsoft.com</see>.
            /// </remarks>
            [PreserveSig]
            D2D1_PIXEL_FORMAT GetPixelFormat();

            /// <summary>
            /// Sets the dots per inch (DPI) of the render target.
            /// </summary>
            /// <param name="dpiX"><para>Type: <b>FLOAT</b> A value greater than or equal to zero that specifies the horizontal DPI of the render target.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-setdpi#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="dpiY"><para>Type: <b>FLOAT</b> A value greater than or equal to zero that specifies the vertical DPI of the render target.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-setdpi#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <remarks>
            /// <para>This method specifies the mapping from pixel space to device-independent space  for the render target.  If both <i>dpiX</i> and <i>dpiY</i> are 0, the factory-read system DPI is chosen. If one parameter is zero and the other unspecified, the DPI is not changed. For <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1hwndrendertarget">ID2D1HwndRenderTarget</a>, the DPI defaults to the most recently factory-read system DPI. The default value for all other render targets is 96 DPI.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-setdpi#">Read more on learn.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            void SetDpi(float dpiX, float dpiY);

            /// <summary>
            /// Return the render target's dots per inch (DPI).
            /// </summary>
            /// <param name="dpiX"><para>Type: <b>FLOAT*</b> When this method returns, contains the horizontal DPI of the render target. This parameter is passed uninitialized.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-getdpi#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <param name="dpiY"><para>Type: <b>FLOAT*</b> When this method returns, contains the vertical DPI of the render target. This parameter is passed uninitialized.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-getdpi#parameters">Read more on learn.microsoft.com</see>.</para></param>
            /// <remarks>
            /// <para>This method indicates the mapping from pixel space to device-independent space  for the render target. For <a href="https://learn.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1hwndrendertarget">ID2D1HwndRenderTarget</a>, the DPI defaults to the most recently factory-read system DPI. The default value for all other render targets is 96 DPI.</para>
            /// <para>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-getdpi#">Read more on learn.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            void GetDpi(out float dpiX, out float dpiY);

            // The AutoGen for GetSize throws an access violation when called. The version here with the HRESULT works correctly, and should use an extension to return the struct.
            // See CsWin32 Issue 167 on incorrect generation: https://github.com/microsoft/CsWin32/issues/167
            // Incorrect generated code:
            //D2D_SIZE_F GetSize();
            /// <summary>
            /// Returns the size of the render target in device-independent pixels.
            /// </summary>
            /// <param name="size">The size.</param>
            /// <returns>
            /// Type: <b><a href="https://learn.microsoft.com/windows/win32/Direct2D/d2d1-size-f">D2D1_SIZE_F</a></b> The current size of the render target in device-independent pixels.
            /// </returns>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-getsize">Learn more about this API from learn.microsoft.com</see>.
            /// </remarks>
            [PreserveSig]
            HRESULT GetSize(out D2D_SIZE_F size);

            // The AutoGen for GetPixelSize throws an access violation when called. The version here with the HRESULT works correctly, and should use an extension to return the struct.
            // See CsWin32 Issue 167 on incorrect generation: https://github.com/microsoft/CsWin32/issues/167
            // Incorrect generated code:
            //D2D_SIZE_U GetPixelSize();
            /// <summary>
            /// Returns the size of the render target in device pixels.
            /// </summary>
            /// <param name="pixelSize">Size of the pixel.</param>
            /// <returns>
            /// Type: <b><a href="https://learn.microsoft.com/windows/win32/Direct2D/d2d1-size-u">D2D1_SIZE_U</a></b> The size of the render target in device pixels.
            /// </returns>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-getpixelsize">Learn more about this API from learn.microsoft.com</see>.
            /// </remarks>
            [PreserveSig]
            HRESULT GetPixelSize(out D2D_SIZE_U pixelSize);

            /// <summary>
            /// Gets the maximum size, in device-dependent units (pixels), of any one bitmap dimension supported by the render target.
            /// </summary>
            /// <returns>
            /// Type: <b>UINT32</b> The maximum size, in pixels, of  any one bitmap dimension supported by the render target.
            /// </returns>
            /// <remarks>
            ///   <see href="https://learn.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-getmaximumbitmapsize">Learn more about this API from learn.microsoft.com</see>.
            /// </remarks>
            [PreserveSig]
            uint GetMaximumBitmapSize();

            /// <summary>
            /// Returns true if the given properties are supported by this render target. The
            /// DPI is ignored. NOTE: If the render target type is software, then neither
            /// D2D1_FEATURE_LEVEL_9 nor D2D1_FEATURE_LEVEL_10 will be considered to be
            /// supported.
            /// </summary>
            /// <param name="renderTargetProperties">The render target properties.</param>
            /// <returns></returns>
            [PreserveSig]
            unsafe BOOL IsSupported(D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties);
            #endregion
        }
    }
}
