// <copyright file="ID2D1DeviceContext2.cs" company="Shkyrockett" >
//     Copyright © 2020 - 2022 Shkyrockett. All rights reserved.
// </copyright>
// <author id="shkyrockett">Shkyrockett</author>
// <license>
//     Licensed under the MIT License. See LICENSE file in the project root for full license information.
// </license>
// <summary></summary>
// <remarks></remarks>

using System.Runtime.InteropServices;
using System.Runtime.Versioning;
using Windows.Win32.Foundation;
using Windows.Win32.Graphics.Direct2D.Common;
using Windows.Win32.Graphics.DirectWrite;
using Windows.Win32.Graphics.Imaging;

namespace Windows.Win32
{
    namespace Graphics.Direct2D
    {
        /// <summary>
        /// Represents an object that can receive drawing commands. Interfaces that inherit
        /// from <see cref="ID2D1RenderTarget" /> render the drawing commands they receive in different
        /// ways. [ID2D1DeviceContext2]
        /// </summary>
        /// <remarks>
        /// Override interface for the AutoGenerated one to fix some broken definitions.
        /// </remarks>
        /// <seealso cref="ID2D1Resource" />
        [Guid("394EA6A3-0C34-4321-950B-6CA20F0BE6C7"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown), ComImport()]
        [SupportedOSPlatform("windows10.0.10240")]
        public interface ID2D1DeviceContext2
            : ID2D1Resource, ID2D1RenderTarget, ID2D1DeviceContext, ID2D1DeviceContext1
        {
            #region ID2D1Resource
            /// <summary>
            /// Gets the factory.
            /// </summary>
            /// <param name="factory">The factory.</param>
            [PreserveSig]
            new void GetFactory(out ID2D1Factory factory);
            #endregion

            #region ID2D1RenderTarget
            /// <summary>
            /// Create a D2D bitmap by copying from memory, or create uninitialized.
            /// </summary>
            new unsafe void CreateBitmap(D2D_SIZE_U size, [Optional] void* srcData, uint pitch, D2D1_BITMAP_PROPERTIES* bitmapProperties, out ID2D1Bitmap bitmap);

            /// <summary>
            /// Create a D2D bitmap by copying a WIC bitmap.
            /// </summary>
            new unsafe void CreateBitmapFromWicBitmap(IWICBitmapSource wicBitmapSource, [Optional] D2D1_BITMAP_PROPERTIES* bitmapProperties, out ID2D1Bitmap bitmap);

            /// <summary>Creates an ID2D1Bitmap whose data is shared with another resource.</summary>
            /// <param name="riid">
            /// <para>Type: <b>REFIID</b> The interface ID of the object supplying the source data.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-createsharedbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="data">
            /// <para>Type: <b>void*</b> An <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1bitmap">ID2D1Bitmap</a>, <a href="https://docs.microsoft.com/windows/win32/api/dxgi/nn-dxgi-idxgisurface">IDXGISurface</a>, or an <a href="https://docs.microsoft.com/windows/win32/api/wincodec/nn-wincodec-iwicbitmaplock">IWICBitmapLock</a> that contains the data to share with the new <b>ID2D1Bitmap</b>. For more information, see the Remarks section.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-createsharedbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="bitmapProperties">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/ns-d2d1-d2d1_bitmap_properties">D2D1_BITMAP_PROPERTIES</a>*</b> The pixel format  and DPI of the bitmap to create . The <a href="https://docs.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> portion of the pixel format  must match the <a href="https://docs.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> of <i>data</i> or the method will fail, but the alpha modes don't have to match. To prevent a  mismatch, you can pass <b>NULL</b> or the value obtained from the <a href="https://docs.microsoft.com/windows/win32/api/d2d1helper/nf-d2d1helper-pixelformat">D2D1::PixelFormat</a> helper function. The DPI settings do not have to match those of <i>data</i>. If both <i>dpiX</i> and <i>dpiY</i> are  0.0f, the DPI of the render target is used.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-createsharedbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="bitmap">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1bitmap">ID2D1Bitmap</a>**</b> When this method returns, contains the address of a pointer to the new bitmap. This parameter is passed uninitialized.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-createsharedbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href="/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> If this method succeeds, it returns <b xmlns:loc="http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an [**HRESULT**](/windows/desktop/com/structure-of-com-error-codes) error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-createsharedbitmap">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new unsafe void CreateSharedBitmap(Guid* riid, void* data, [Optional] D2D1_BITMAP_PROPERTIES* bitmapProperties, out ID2D1Bitmap bitmap);

            /// <summary>
            /// Creates a bitmap brush. The bitmap is scaled, rotated, skewed or tiled to fill
            /// or pen a geometry.
            /// </summary>
            new unsafe void CreateBitmapBrush(ID2D1Bitmap bitmap, [Optional] D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties, [Optional] D2D1_BRUSH_PROPERTIES* brushProperties, out ID2D1BitmapBrush bitmapBrush);

            /// <summary>
            /// Creates the solid color brush.
            /// </summary>
            /// <param name="color">The color.</param>
            /// <param name="brushProperties">The brush properties.</param>
            /// <param name="solidColorBrush"></param>
            /// <returns></returns>
            new unsafe void CreateSolidColorBrush(D2D1_COLOR_F* color, [Optional] D2D1_BRUSH_PROPERTIES* brushProperties, out ID2D1SolidColorBrush solidColorBrush);

            /// <summary>Creates a gradient stop collection, enabling the gradient to contain color channels with values outside of [0,1] and also enabling rendering to a high-color render target with interpolation in sRGB space.</summary>
            /// <param name="gradientStops"></param>
            /// <param name="gradientStopsCount"></param>
            /// <param name="colorInterpolationGamma"></param>
            /// <param name="extendMode">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1/ne-d2d1-d2d1_extend_mode">D2D1_EXTEND_MODE</a></b> Defines how colors outside of the range defined by the stop collection are determined.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="gradientStopCollection"></param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new unsafe void CreateGradientStopCollection(D2D1_GRADIENT_STOP* gradientStops, uint gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, out ID2D1GradientStopCollection gradientStopCollection);

            /// <summary>
            /// Creates the linear gradient brush stub.
            /// </summary>
            new unsafe void CreateLinearGradientBrush(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties, [Optional] D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection gradientStopCollection, out ID2D1LinearGradientBrush linearGradientBrush);

            /// <summary>
            /// Creates the radial gradient brush.
            /// </summary>
            new unsafe void CreateRadialGradientBrush(D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties, [Optional] D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection gradientStopCollection, out ID2D1RadialGradientBrush radialGradientBrush);

            /// <summary>
            /// Creates a bitmap render target whose bitmap can be used as a source for
            /// rendering in the API.
            /// </summary>
            new unsafe void CreateCompatibleRenderTarget([Optional] D2D_SIZE_F* desiredSize, [Optional] D2D_SIZE_U* desiredPixelSize, [Optional] D2D1_PIXEL_FORMAT* desiredFormat, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, out ID2D1BitmapRenderTarget bitmapRenderTarget);

            /// <summary>
            /// Creates a layer resource that can be used on any target and which will resize
            /// under the covers if necessary.
            /// </summary>
            new unsafe void CreateLayer([Optional] D2D_SIZE_F* size, out ID2D1Layer layer);

            /// <summary>Create a mesh that uses triangles to describe a shape.</summary>
            /// <param name="mesh">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1mesh">ID2D1Mesh</a>**</b> When this method returns, contains a pointer to a pointer to the new mesh.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-createmesh#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href="/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> If this method succeeds, it returns <b xmlns:loc="http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an [**HRESULT**](/windows/desktop/com/structure-of-com-error-codes) error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-createmesh">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new void CreateMesh(out ID2D1Mesh mesh);

            /// <summary>Draws a line between the specified points using the specified stroke style.</summary>
            /// <param name="point0">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b> The start point of the line, in device-independent pixels.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="point1">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b> The end point of the line, in device-independent pixels.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="brush">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The brush used to paint the line's stroke.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="strokeWidth">
            /// <para>Type: <b>FLOAT</b> The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="strokeStyle">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1strokestyle">ID2D1StrokeStyle</a>*</b> The style of stroke to paint, or <b>NULL</b> to paint a solid line.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>DrawLine</b>) failed, check the result returned by the <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawline#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void DrawLine(D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);

            /// <summary>
            /// Draws the rectangle.
            /// </summary>
            [PreserveSig]
            new unsafe void DrawRectangle(D2D_RECT_F* rect, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);

            /// <summary>
            /// Fills the rectangle.
            /// </summary>
            [PreserveSig]
            new unsafe void FillRectangle(D2D_RECT_F* rect, ID2D1Brush brush);

            /// <summary>
            /// Draws the rounded rectangle.
            /// </summary>
            [PreserveSig]
            new unsafe void DrawRoundedRectangle(D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);

            /// <summary>
            /// Fills the rounded rectangle.
            /// </summary>
            [PreserveSig]
            new unsafe void FillRoundedRectangle(D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush brush);

            /// <summary>
            /// Draws the ellipse.
            /// </summary>
            [PreserveSig]
            new unsafe void DrawEllipse(D2D1_ELLIPSE* ellipse, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);

            /// <summary>
            /// Fills the ellipse.
            /// </summary>
            [PreserveSig]
            new unsafe void FillEllipse(D2D1_ELLIPSE* ellipse, ID2D1Brush brush);

            /// <summary>Draws the outline of the specified geometry using the specified stroke style.</summary>
            /// <param name="geometry">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1geometry">ID2D1Geometry</a>*</b> The geometry to draw.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="brush">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The brush used to paint the geometry's stroke.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="strokeWidth">
            /// <para>Type: <b>FLOAT</b> The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="strokeStyle">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1strokestyle">ID2D1StrokeStyle</a>*</b> The style of stroke to apply to the geometry's outline, or <b>NULL</b> to paint a solid stroke.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>DrawGeometry</b>) failed, check the result returned by the <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawgeometry#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void DrawGeometry(ID2D1Geometry geometry, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);

            /// <summary>Paints the interior of the specified geometry.</summary>
            /// <param name="geometry">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1geometry">ID2D1Geometry</a>*</b> The geometry to paint.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-fillgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="brush">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The brush used to paint the geometry's interior.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-fillgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="opacityBrush">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The opacity mask to apply to the geometry, or <b>NULL</b> for no opacity mask. If an opacity mask (the <i>opacityBrush</i> parameter) is specified, <i>brush</i> must be an <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1bitmapbrush">ID2D1BitmapBrush</a> that has   its x- and y-extend modes set to <a href="https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_extend_mode">D2D1_EXTEND_MODE_CLAMP</a>. For more information, see the Remarks section.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-fillgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If the <i>opacityBrush</i> parameter is not <b>NULL</b>, the alpha value of each pixel of the mapped <i>opacityBrush</i> is used to determine the resulting opacity of each corresponding pixel of the geometry. Only the alpha value of each color in the brush is used for this processing; all other color information is ignored. The alpha value specified by the brush is multiplied by the alpha value of the geometry after the geometry has been painted by <i>brush</i>.</para>
            /// <para>When this method fails, it does not return an error code. To determine whether a drawing operation (such as <b>FillGeometry</b>) failed, check the result returned by the <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> method.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-fillgeometry#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void FillGeometry(ID2D1Geometry geometry, ID2D1Brush brush, ID2D1Brush opacityBrush);

            /// <summary>Paints the interior of the specified mesh.</summary>
            /// <param name="mesh">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1mesh">ID2D1Mesh</a>*</b> The mesh to paint.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-fillmesh#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="brush">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The brush used to paint the mesh.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-fillmesh#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The current antialias mode of the render target must be <a href="https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_antialias_mode">D2D1_ANTIALIAS_MODE_ALIASED</a> when <b>FillMesh</b> is called. To change the render target's antialias mode, use the <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-setantialiasmode">SetAntialiasMode</a> method. <b>FillMesh</b> does not expect a particular winding order for the triangles in the <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1mesh">ID2D1Mesh</a>; both clockwise and counter-clockwise will work. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>FillMesh</b>) failed, check the result returned by the <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-fillmesh#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void FillMesh(ID2D1Mesh mesh, ID2D1Brush brush);

            /// <summary>
            /// Fill using the alpha channel of the supplied opacity mask bitmap. The brush
            /// opacity will be modulated by the mask. The render target anti-aliasing mode must
            /// be set to aliased.
            /// </summary>
            [PreserveSig]
            new unsafe void FillOpacityMask(ID2D1Bitmap opacityMask, ID2D1Brush brush, D2D1_OPACITY_MASK_CONTENT content, [Optional] D2D_RECT_F* destinationRectangle, [Optional] D2D_RECT_F* sourceRectangle);

            /// <summary>
            /// Draws the bitmap.
            /// </summary>
            [PreserveSig]
            new unsafe void DrawBitmap(ID2D1Bitmap bitmap, [Optional] D2D_RECT_F* destinationRectangle, float opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, [Optional] D2D_RECT_F* sourceRectangle);

            /// <summary>
            /// Draws the text within the given layout rectangle and by default also performs
            /// baseline snapping.
            /// </summary>
            /// <param name="string">The string.</param>
            /// <param name="stringLength">Length of the string.</param>
            /// <param name="textFormat">The text format.</param>
            /// <param name="layoutRect">The layout rect.</param>
            /// <param name="defaultFillBrush">The default fill brush.</param>
            /// <param name="options">The options.</param>
            /// <param name="measuringMode">The measuring mode.</param>
            [PreserveSig]
            new unsafe void DrawText(PCWSTR @string, uint stringLength, IDWriteTextFormat textFormat, D2D_RECT_F* layoutRect, ID2D1Brush defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode);

            /// <summary>Draws the formatted text described by the specified IDWriteTextLayout object.</summary>
            /// <param name="origin">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b> The point, described in device-independent pixels, at which the upper-left corner of the text described by <i>textLayout</i> is drawn.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawtextlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="textLayout">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritetextlayout">IDWriteTextLayout</a>*</b> The formatted text to draw. Any drawing effects that do not inherit from <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1resource">ID2D1Resource</a> are ignored. If there are drawing effects that inherit from <b>ID2D1Resource</b> that are not brushes, this method fails and the render target is put in an error state.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawtextlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="defaultFillBrush">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The brush used to paint any text in <i>textLayout</i> that does not already have a brush associated with it as a drawing effect (specified by the <a href="https://docs.microsoft.com/windows/win32/api/dwrite/nf-dwrite-idwritetextlayout-setdrawingeffect">IDWriteTextLayout::SetDrawingEffect</a> method).</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawtextlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="options">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_draw_text_options">D2D1_DRAW_TEXT_OPTIONS</a></b> A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <a href="https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_draw_text_options">D2D1_DRAW_TEXT_OPTIONS_NONE</a>, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawtextlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>When drawing the same text repeatedly, using the <b>DrawTextLayout</b> method is more efficient than using the <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawtext(constwchar_uint32_idwritetextformat_constd2d1_rect_f__id2d1brush_d2d1_draw_text_options_dwrite_measuring_mode)">DrawText</a> method because the text doesn't need to be formatted and the layout processed with each call. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>DrawTextLayout</b>) failed, check the result returned by the <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawtextlayout#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void DrawTextLayout(D2D_POINT_2F origin, IDWriteTextLayout textLayout, ID2D1Brush defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options);

            /// <summary>Draws the specified glyphs.</summary>
            /// <param name="baselineOrigin">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b> The origin, in device-independent pixels, of the glyphs' baseline.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="glyphRun">
            /// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_glyph_run">DWRITE_GLYPH_RUN</a>*</b> The glyphs to render.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="foregroundBrush">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The brush used to paint the specified glyphs.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="measuringMode">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/dcommon/ne-dcommon-dwrite_measuring_mode">DWRITE_MEASURING_MODE</a></b> A value that indicates how glyph metrics are used to measure text when it is formatted.  The default value is <a href="https://docs.microsoft.com/windows/win32/api/dcommon/ne-dcommon-dwrite_measuring_mode">DWRITE_MEASURING_MODE_NATURAL</a>.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>DrawGlyphRun</b>) failed, check the result returned by the <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawglyphrun#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void DrawGlyphRun(D2D_POINT_2F baselineOrigin, in DWRITE_GLYPH_RUN glyphRun, ID2D1Brush foregroundBrush, DWRITE_MEASURING_MODE measuringMode);

            /// <summary>
            /// Sets the transform.
            /// </summary>
            /// <param name="transform">The transform.</param>
            [PreserveSig]
            new unsafe void SetTransform(D2D_MATRIX_3X2_F* transform);

            /// <summary>Gets the current transform of the render target.</summary>
            /// <param name="transform">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/Direct2D/d2d1-matrix-3x2-f">D2D1_MATRIX_3X2_F</a>*</b> When this returns, contains the current transform of the render target. This parameter is passed uninitialized.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-gettransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-gettransform">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new unsafe void GetTransform(D2D_MATRIX_3X2_F* transform);

            /// <summary>Sets the antialiasing mode of the render target. The antialiasing mode applies to all subsequent drawing operations, excluding text and glyph drawing operations.</summary>
            /// <param name="antialiasMode">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_antialias_mode">D2D1_ANTIALIAS_MODE</a></b> The antialiasing mode for future drawing operations.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-setantialiasmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>To specify the antialiasing mode for text and glyph operations, use the <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-settextantialiasmode">SetTextAntialiasMode</a> method.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-setantialiasmode#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void SetAntialiasMode(D2D1_ANTIALIAS_MODE antialiasMode);

            /// <summary>Retrieves the current antialiasing mode for nontext drawing operations.</summary>
            /// <returns>
            /// <para>Type: <b><a href="/windows/win32/api/d2d1/ne-d2d1-d2d1_antialias_mode">D2D1_ANTIALIAS_MODE</a></b> The current antialiasing mode for nontext drawing operations.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-getantialiasmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new D2D1_ANTIALIAS_MODE GetAntialiasMode();

            /// <summary>Specifies the antialiasing mode to use for subsequent text and glyph drawing operations.</summary>
            /// <param name="textAntialiasMode">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_text_antialias_mode">D2D1_TEXT_ANTIALIAS_MODE</a></b> The antialiasing mode to use for subsequent text and glyph drawing operations.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-settextantialiasmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-settextantialiasmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void SetTextAntialiasMode(D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode);

            /// <summary>Gets the current antialiasing mode for text and glyph drawing operations.</summary>
            /// <returns>
            /// <para>Type: <b><a href="/windows/win32/api/d2d1/ne-d2d1-d2d1_text_antialias_mode">D2D1_TEXT_ANTIALIAS_MODE</a></b> The current antialiasing mode for text and glyph drawing operations.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-gettextantialiasmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new D2D1_TEXT_ANTIALIAS_MODE GetTextAntialiasMode();

            /// <summary>Specifies text rendering options to be applied to all subsequent text and glyph drawing operations.</summary>
            /// <param name="textRenderingParams">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwriterenderingparams">IDWriteRenderingParams</a>*</b> The text rendering options to be applied to all subsequent text and glyph drawing operations; <b>NULL</b> to clear current text rendering options.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-settextrenderingparams#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If the settings specified by  <i>textRenderingParams</i> are incompatible with the render target's text antialiasing mode (specified by <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-settextantialiasmode">SetTextAntialiasMode</a>), subsequent text and glyph drawing operations will fail and put the render target into an error state.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-settextrenderingparams#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void SetTextRenderingParams(IDWriteRenderingParams textRenderingParams);

            /// <summary>Retrieves the render target's current text rendering options.</summary>
            /// <param name="textRenderingParams">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwriterenderingparams">IDWriteRenderingParams</a>**</b> When this method returns, <i>textRenderingParams</i>contains the address  of a pointer to the render target's current text rendering options.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-gettextrenderingparams#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If the settings specified by  <i>textRenderingParams</i> are incompatible with the render target's text antialiasing mode (specified by <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-settextantialiasmode">SetTextAntialiasMode</a>), subsequent text and glyph drawing operations will fail and put the render target into an error state.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-gettextrenderingparams#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void GetTextRenderingParams(out IDWriteRenderingParams textRenderingParams);

            /// <summary>Specifies a label for subsequent drawing operations.</summary>
            /// <param name="tag1">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a></b> A label to apply to subsequent drawing operations.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-settags#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="tag2">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a></b> A label to apply to subsequent drawing operations.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-settags#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The labels specified by this method are printed by debug error messages. If no tag is set, the default value for each tag is 0.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-settags#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void SetTags(ulong tag1, ulong tag2);

            /// <summary>Gets the label for subsequent drawing operations.</summary>
            /// <param name="tag1">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b> When this method returns, contains the first label for subsequent drawing operations. This parameter is passed uninitialized. If <b>NULL</b> is specified, no value is retrieved for this parameter.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-gettags#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="tag2">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b> When this method returns, contains the second label for subsequent drawing operations. This parameter is passed uninitialized. If <b>NULL</b> is specified, no value is retrieved for this parameter.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-gettags#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If the same address is passed for both parameters, both parameters receive the value of the second tag.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-gettags#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new unsafe void GetTags([Optional] ulong* tag1, [Optional] ulong* tag2);

            /// <summary>
            /// Start a layer of drawing calls. The way in which the layer must be resolved is
            /// specified first as well as the logical resource that stores the layer
            /// parameters. The supplied layer resource might grow if the specified content
            /// cannot fit inside it. The layer will grow monotonically on each axis.  If a NULL
            /// ID2D1Layer is provided, then a layer resource will be allocated automatically.
            /// </summary>
            [PreserveSig]
            new void PushLayer(in D2D1_LAYER_PARAMETERS layerParameters, ID2D1Layer layer);

            /// <summary>Stops redirecting drawing operations to the layer that is specified by the last PushLayer call.</summary>
            /// <remarks>
            /// <para>A <b>PopLayer</b>  must match a previous <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-pushlayer(constd2d1_layer_parameters__id2d1layer)">PushLayer</a> call. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>PopLayer</b>) failed, check the result returned by the <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-poplayer#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void PopLayer();

            /// <summary>Executes all pending drawing commands.</summary>
            /// <param name="tag1">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b> When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-flush#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="tag2">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b> When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-flush#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href="/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> If the method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code and sets <i>tag1</i> and <i>tag2</i> to the tags that were active when the error occurred. If no error occurred, this method sets the error tag state to be (0,0).</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-flush">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new unsafe void Flush([Optional] ulong* tag1, [Optional] ulong* tag2);

            /// <summary>Saves the current drawing state to the specified ID2D1DrawingStateBlock.</summary>
            /// <param name="drawingStateBlock">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1drawingstateblock">ID2D1DrawingStateBlock</a>*</b> When this method returns, contains the current drawing state of the render target. This parameter must be initialized before passing it to the method.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-savedrawingstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-savedrawingstate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void SaveDrawingState(ID2D1DrawingStateBlock drawingStateBlock);

            /// <summary>Sets the render target's drawing state to that of the specified ID2D1DrawingStateBlock.</summary>
            /// <param name="drawingStateBlock">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1drawingstateblock">ID2D1DrawingStateBlock</a>*</b> The new drawing state of the render target.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-restoredrawingstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-restoredrawingstate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void RestoreDrawingState(ID2D1DrawingStateBlock drawingStateBlock);

            /// <summary>
            /// Pushes a clip. The clip can be anti-aliased. The clip must be axis aligned. If
            /// the current world transform is not axis preserving, then the bounding box of the
            /// transformed clip rect will be used. The clip will remain in effect until a
            /// PopAxisAligned clip call is made.
            /// </summary>
            /// <param name="clipRect">The clip rect.</param>
            /// <param name="antialiasMode">The anti-alias mode.</param>
            [PreserveSig]
            new unsafe void PushAxisAlignedClip(D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode);

            /// <summary>Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.</summary>
            /// <remarks>
            /// <para>A <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-pushaxisalignedclip(constd2d1_rect_f__d2d1_antialias_mode)">PushAxisAlignedClip</a>/<b>PopAxisAlignedClip</b> pair can occur around or within a <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-pushlayer(constd2d1_layer_parameters__id2d1layer)">PushLayer</a>/<a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-poplayer">PopLayer</a> pair, but may not overlap. For example, a <b>PushAxisAlignedClip</b>, <b>PushLayer</b>, <b>PopLayer</b>, <b>PopAxisAlignedClip</b>  sequence is valid, but a <b>PushAxisAlignedClip</b>, <b>PushLayer</b>, <b>PopAxisAlignedClip</b>, <b>PopLayer</b> sequence is not. <b>PopAxisAlignedClip</b> must be called once for every call to <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-pushaxisalignedclip(constd2d1_rect_f__d2d1_antialias_mode)">PushAxisAlignedClip</a>. For an example, see <a href="https://docs.microsoft.com/windows/win32/Direct2D/how-to-clip-with-axis-aligned-rects">How to Clip with an Axis-Aligned Clip Rectangle</a>. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>PopAxisAlignedClip</b>) failed, check the result returned by the <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-popaxisalignedclip#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void PopAxisAlignedClip();

            /// <summary>
            /// Clears the specified clear color.
            /// </summary>
            /// <param name="clearColor">Color of the clear.</param>
            [PreserveSig]
            new unsafe void Clear([Optional] D2D1_COLOR_F* clearColor);

            /// <summary>Initiates drawing on this render target.</summary>
            /// <remarks>
            /// <para>Drawing operations can only be issued between a <b>BeginDraw</b> and <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> call. BeginDraw and EndDraw are used to indicate that a render target is in use by the Direct2D system. Different implementations of <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1rendertarget">ID2D1RenderTarget</a> might behave differently when <b>BeginDraw</b> is called. An <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1bitmaprendertarget">ID2D1BitmapRenderTarget</a> may be locked between <b>BeginDraw</b>/<a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> calls, a DXGI surface render target might be acquired on <b>BeginDraw</b> and released on <b>EndDraw</b>, while an <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1hwndrendertarget">ID2D1HwndRenderTarget</a> may begin batching at <b>BeginDraw</b> and may present on <b>EndDraw</b>, for example. The BeginDraw method must be called before rendering operations can be called, though state-setting and state-retrieval operations can be performed even outside of <b>BeginDraw</b>/<a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a>. After <b>BeginDraw</b> is called, a render target will normally build up a batch of rendering commands, but defer processing of these commands until either an internal buffer is full, the <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">Flush</a> method is called, or until <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> is called. The <b>EndDraw</b> method causes any batched drawing operations to complete, and then returns an HRESULT indicating the success of the operations and, optionally, the tag state of the render target at the time the error occurred. The <b>EndDraw</b> method always succeeds: it should not be called twice even if a previous <b>EndDraw</b> resulted in a failing HRESULT. If <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> is called without a matched call to <b>BeginDraw</b>, it returns an error indicating that <b>BeginDraw</b> must be called before <b>EndDraw</b>. Calling <b>BeginDraw</b> twice on a render target puts the target into an error state where nothing further is drawn, and returns an appropriate HRESULT and error information when <b>EndDraw</b> is called.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-begindraw#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void BeginDraw();

            // The AutoGen for this omits the HRESULT which is needed in the drawing code.
            /// <summary>Ends drawing operations on the render target and indicates the current error state and associated tags.</summary>
            /// <param name="tag1">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b> When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-enddraw#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="tag2">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b> When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-enddraw#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href="/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> If the method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code and sets <i>tag1</i> and <i>tag2</i> to the tags that were active when the error occurred.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-enddraw">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
			//new unsafe void EndDraw([Optional] ulong* tag1, [Optional] ulong* tag2);
            [PreserveSig]
            new unsafe HRESULT EndDraw([Optional] ulong* tag1, [Optional] ulong* tag2);

            /// <summary>Retrieves the pixel format and alpha mode of the render target.</summary>
            /// <returns>
            /// <para>Type: <b><a href="/windows/win32/api/dcommon/ns-dcommon-d2d1_pixel_format">D2D1_PIXEL_FORMAT</a></b> The pixel format and alpha mode of the render target.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-getpixelformat">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new D2D1_PIXEL_FORMAT GetPixelFormat();

            /// <summary>Sets the dots per inch (DPI) of the render target.</summary>
            /// <param name="dpiX">
            /// <para>Type: <b>FLOAT</b> A value greater than or equal to zero that specifies the horizontal DPI of the render target.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-setdpi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="dpiY">
            /// <para>Type: <b>FLOAT</b> A value greater than or equal to zero that specifies the vertical DPI of the render target.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-setdpi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This method specifies the mapping from pixel space to device-independent space  for the render target.  If both <i>dpiX</i> and <i>dpiY</i> are 0, the factory-read system DPI is chosen. If one parameter is zero and the other unspecified, the DPI is not changed. For <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1hwndrendertarget">ID2D1HwndRenderTarget</a>, the DPI defaults to the most recently factory-read system DPI. The default value for all other render targets is 96 DPI.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-setdpi#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void SetDpi(float dpiX, float dpiY);

            /// <summary>Return the render target's dots per inch (DPI).</summary>
            /// <param name="dpiX">
            /// <para>Type: <b>FLOAT*</b> When this method returns, contains the horizontal DPI of the render target. This parameter is passed uninitialized.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-getdpi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="dpiY">
            /// <para>Type: <b>FLOAT*</b> When this method returns, contains the vertical DPI of the render target. This parameter is passed uninitialized.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-getdpi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This method indicates the mapping from pixel space to device-independent space  for the render target. For <a href="https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1hwndrendertarget">ID2D1HwndRenderTarget</a>, the DPI defaults to the most recently factory-read system DPI. The default value for all other render targets is 96 DPI.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-getdpi#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new unsafe void GetDpi(float* dpiX, float* dpiY);

            // The AutoGen for this this throws an access violation when called. This version works.
            /// <summary>Returns the size of the render target in device-independent pixels.</summary>
            /// <returns>
            /// <para>Type: <b><a href="/windows/win32/Direct2D/d2d1-size-f">D2D1_SIZE_F</a></b> The current size of the render target in device-independent pixels.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-getsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            //new D2D_SIZE_F GetSize();
            unsafe new HRESULT GetSize(out D2D_SIZE_F size);

            // This seems to be the correct implementation rather than what the AutoGen creates.
            /// <summary>Returns the size of the render target in device pixels.</summary>
            /// <returns>
            /// <para>Type: <b><a href="/windows/win32/Direct2D/d2d1-size-u">D2D1_SIZE_U</a></b> The size of the render target in device pixels.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-getpixelsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            //new D2D_SIZE_U GetPixelSize();
            unsafe new HRESULT GetPixelSize(out D2D_SIZE_U pixelSize);

            /// <summary>Gets the maximum size, in device-dependent units (pixels), of any one bitmap dimension supported by the render target.</summary>
            /// <returns>
            /// <para>Type: <b>UINT32</b> The maximum size, in pixels, of  any one bitmap dimension supported by the render target.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-getmaximumbitmapsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new uint GetMaximumBitmapSize();

            /// <summary>
            /// Returns true if the given properties are supported by this render target. The
            /// DPI is ignored. NOTE: If the render target type is software, then neither
            /// D2D1_FEATURE_LEVEL_9 nor D2D1_FEATURE_LEVEL_10 will be considered to be
            /// supported.
            /// </summary>
            /// <param name="renderTargetProperties">The render target properties.</param>
            /// <returns></returns>
            [PreserveSig]
            new unsafe BOOL IsSupported(D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties);
            #endregion

            #region ID2D1DeviceContext
            /// <summary>
            /// Creates the bitmap.
            /// </summary>
            /// <param name="size">The size.</param>
            /// <param name="sourceData">The source data.</param>
            /// <param name="pitch">The pitch.</param>
            /// <param name="bitmapProperties">The bitmap properties.</param>
            /// <param name="bitmap">The bitmap.</param>
            new unsafe void CreateBitmap(D2D_SIZE_U size, [Optional] void* sourceData, uint pitch, in D2D1_BITMAP_PROPERTIES1 bitmapProperties, out ID2D1Bitmap1 bitmap);

            /// <summary>
            /// Creates the bitmap from wic bitmap.
            /// </summary>
            /// <param name="wicBitmapSource">The wic bitmap source.</param>
            /// <param name="bitmapProperties">The bitmap properties.</param>
            /// <param name="bitmap">The bitmap.</param>
            new void CreateBitmapFromWicBitmap(IWICBitmapSource wicBitmapSource, in D2D1_BITMAP_PROPERTIES1 bitmapProperties, out ID2D1Bitmap1 bitmap);

            /// <summary>Creates a color context.</summary>
            /// <param name="space">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_color_space">D2D1_COLOR_SPACE</a></b> The space  of color context to create.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="profile">
            /// <para>Type: <b>const BYTE*</b> A buffer containing the ICC profile bytes used to initialize the color context when <i>space</i> is <a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_color_space">D2D1_COLOR_SPACE_CUSTOM</a>.  For other types, the parameter is ignored and should be set to <b>NULL</b>.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="profileSize">
            /// <para>Type: <b>UINT32</b> The size in bytes of <i>Profile</i>.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="colorContext">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1colorcontext">ID2D1ColorContext</a>**</b> When this method returns, contains the address of a pointer to a new color context object.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontext">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new unsafe void CreateColorContext(D2D1_COLOR_SPACE space, [Optional] byte* profile, uint profileSize, out ID2D1ColorContext colorContext);

            /// <summary>Creates a color context by loading it from the specified filename. The profile bytes are the contents of the file specified by Filename.</summary>
            /// <param name="filename">
            /// <para>Type: <b>PCWSTR</b> The path to the file containing the profile bytes to initialize the color context with.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontextfromfilename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="colorContext">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1colorcontext">ID2D1ColorContext</a>**</b> When this method returns, contains the address of a pointer to a new color context.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontextfromfilename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontextfromfilename">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new void CreateColorContextFromFilename(PCWSTR filename, out ID2D1ColorContext colorContext);

            /// <summary>Creates a color context from an IWICColorContext. The D2D1ColorContext space of the resulting context varies, see Remarks for more info.</summary>
            /// <param name="wicColorContext">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolorcontext">IWICColorContext</a>*</b> The <a href="https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolorcontext">IWICColorContext</a> used to initialize the color context.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontextfromwiccolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="colorContext">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1colorcontext">ID2D1ColorContext</a>**</b> When this method returns, contains the address of a pointer to a new color context.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontextfromwiccolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontextfromwiccolorcontext">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new void CreateColorContextFromWicColorContext(IWICColorContext wicColorContext, out ID2D1ColorContext colorContext);

            /// <summary>
            /// Creates the bitmap from dxgi surface.
            /// </summary>
            /// <param name="surface">The surface.</param>
            /// <param name="bitmapProperties">The bitmap properties.</param>
            /// <param name="bitmap">The bitmap.</param>
            new void CreateBitmapFromDxgiSurface(Dxgi.IDXGISurface surface, in D2D1_BITMAP_PROPERTIES1 bitmapProperties, out ID2D1Bitmap1 bitmap);

            /// <summary>Creates an effect for the specified class ID.</summary>
            /// <param name="effectId">
            /// <para>Type: <b>REFCLSID</b> The class ID of the effect to create. See <a href="https://docs.microsoft.com/windows/desktop/Direct2D/built-in-effects">Built-in Effects</a> for a list of effect IDs.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createeffect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="effect">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1effect">ID2D1Effect</a>**</b> When this method returns, contains the address of a pointer to a new effect.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createeffect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createeffect">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new unsafe void CreateEffect(Guid* effectId, out ID2D1Effect effect);

            /// <summary>Creates a gradient stop collection, enabling the gradient to contain color channels with values outside of [0,1] and also enabling rendering to a high-color render target with interpolation in sRGB space.</summary>
            /// <param name="straightAlphaGradientStops">
            /// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d2d1/ns-d2d1-d2d1_gradient_stop">D2D1_GRADIENT_STOP</a>*</b> An array of color values and offsets.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="straightAlphaGradientStopsCount">
            /// <para>Type: <b>UINT</b> The number of elements in the <i>gradientStops</i> array.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="preInterpolationSpace">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_color_space">D2D1_COLOR_SPACE</a></b> Specifies both the input color space and the space in which the color interpolation occurs.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="postInterpolationSpace">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_color_space">D2D1_COLOR_SPACE</a></b> The color space that colors will be converted to after interpolation occurs.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="bufferPrecision">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_buffer_precision">D2D1_BUFFER_PRECISION</a></b> The precision of the texture used to hold interpolated values. <div class="alert"><b>Note</b>  This method will fail if the underlying Direct3D device does not support the requested buffer precision.  Use <a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-isbufferprecisionsupported">ID2D1DeviceContext::IsBufferPrecisionSupported</a> to determine what is supported. </div> <div> </div></para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="extendMode">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1/ne-d2d1-d2d1_extend_mode">D2D1_EXTEND_MODE</a></b> Defines how colors outside of the range defined by the stop collection are determined.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="colorInterpolationMode">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_color_interpolation_mode">D2D1_COLOR_INTERPOLATION_MODE</a></b> Defines how colors are interpolated.  D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED is the default, see Remarks for more info.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="gradientStopCollection1">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1gradientstopcollection1">ID2D1GradientStopCollection1</a>**</b> The new gradient stop collection.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new unsafe void CreateGradientStopCollection(D2D1_GRADIENT_STOP* straightAlphaGradientStops, uint straightAlphaGradientStopsCount, D2D1_COLOR_SPACE preInterpolationSpace, D2D1_COLOR_SPACE postInterpolationSpace, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_EXTEND_MODE extendMode, D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode, out ID2D1GradientStopCollection1 gradientStopCollection1);

            /// <summary>
            /// Creates the image brush.
            /// </summary>
            /// <param name="image">The image.</param>
            /// <param name="imageBrushProperties">The image brush properties.</param>
            /// <param name="brushProperties">The brush properties.</param>
            /// <param name="imageBrush">The image brush.</param>
            new unsafe void CreateImageBrush(ID2D1Image image, D2D1_IMAGE_BRUSH_PROPERTIES* imageBrushProperties, [Optional] D2D1_BRUSH_PROPERTIES* brushProperties, out ID2D1ImageBrush imageBrush);

            /// <summary>
            /// Creates the bitmap brush.
            /// </summary>
            /// <param name="bitmap">The bitmap.</param>
            /// <param name="bitmapBrushProperties">The bitmap brush properties.</param>
            /// <param name="brushProperties">The brush properties.</param>
            /// <param name="bitmapBrush">The bitmap brush.</param>
            new unsafe void CreateBitmapBrush(ID2D1Bitmap bitmap, [Optional] D2D1_BITMAP_BRUSH_PROPERTIES1* bitmapBrushProperties, [Optional] D2D1_BRUSH_PROPERTIES* brushProperties, out ID2D1BitmapBrush1 bitmapBrush);

            /// <summary>Creates a ID2D1CommandList object.</summary>
            /// <param name="commandList">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1commandlist">ID2D1CommandList</a>**</b> When this method returns, contains the address of a pointer to a command list.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcommandlist#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcommandlist">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new void CreateCommandList(out ID2D1CommandList commandList);

            /// <summary>Indicates whether the format is supported by the device context.</summary>
            /// <param name="format">
            /// <para>Type: <b>format</b> The DXGI format to check.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-isdxgiformatsupported#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>BOOL</b> Returns TRUE if the format is supported.  Returns FALSE if the format is not supported.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-isdxgiformatsupported">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new BOOL IsDxgiFormatSupported(Dxgi.Common.DXGI_FORMAT format);

            /// <summary>Indicates whether the buffer precision is supported by the underlying Direct3D device.</summary>
            /// <param name="bufferPrecision">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_buffer_precision">D2D1_BUFFER_PRECISION</a></b> The buffer precision to check.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-isbufferprecisionsupported#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>BOOL</b> Returns TRUE if the buffer precision is supported.  Returns FALSE if the buffer precision is not supported.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-isbufferprecisionsupported">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new BOOL IsBufferPrecisionSupported(D2D1_BUFFER_PRECISION bufferPrecision);

            /// <summary>Gets the bounds of an image without the world transform of the context applied.</summary>
            /// <param name="image">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1image">ID2D1Image</a>*</b> The image whose bounds will be calculated.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getimagelocalbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="localBounds">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>[1]</b> When this method returns, contains a pointer to the bounds of the image in device independent pixels (DIPs) and in local space.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getimagelocalbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>This method does not return a value.</returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getimagelocalbounds">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new unsafe void GetImageLocalBounds(ID2D1Image image, D2D_RECT_F* localBounds);

            /// <summary>Gets the bounds of an image with the world transform of the context applied.</summary>
            /// <param name="image">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1image">ID2D1Image</a>*</b> The image whose bounds will be calculated.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getimageworldbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="worldBounds">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>[1]</b> When this method returns, contains a pointer to the bounds of the image in device independent pixels (DIPs).</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getimageworldbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getimageworldbounds">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new unsafe void GetImageWorldBounds(ID2D1Image image, D2D_RECT_F* worldBounds);

            /// <summary>Gets the world-space bounds in DIPs of the glyph run using the device context DPI.</summary>
            /// <param name="baselineOrigin">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b> The origin of the baseline for the glyph run.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getglyphrunworldbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="glyphRun">
            /// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/dwrite/ns-dwrite-dwrite_glyph_run">DWRITE_GLYPH_RUN</a>*</b> The glyph run to render.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getglyphrunworldbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="measuringMode">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dcommon/ne-dcommon-dwrite_measuring_mode">DWRITE_MEASURING_MODE</a></b> The DirectWrite measuring mode that indicates how glyph metrics are used to measure text when it is formatted.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getglyphrunworldbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="bounds">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b> The bounds of the glyph run in DIPs and in world space.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getglyphrunworldbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getglyphrunworldbounds">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new unsafe void GetGlyphRunWorldBounds(D2D_POINT_2F baselineOrigin, in DWRITE_GLYPH_RUN glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D_RECT_F* bounds);

            /// <summary>Gets the device associated with a device context.</summary>
            /// <param name="device">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1device">ID2D1Device</a>**</b> When this method returns, contains the address of a pointer to a Direct2D device associated with this device context.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getdevice#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The application can retrieve the device even if it is created from an earlier render target code-path. The application must use an <a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1devicecontext">ID2D1DeviceContext</a> interface and then call <b>GetDevice</b>. Some functionality for controlling all of the resources for a set of device contexts is maintained only on an <a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1device">ID2D1Device</a> object.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getdevice#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void GetDevice(out ID2D1Device device);

            /// <summary>The bitmap or command list to which the Direct2D device context will now render.</summary>
            /// <param name="image">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1image">ID2D1Image</a>*</b> The surface or command list to which the Direct2D device context will render.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-settarget#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The target can be changed at any time, including while the context is drawing. The target can be either a bitmap created with the <a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_bitmap_options">D2D1_BITMAP_OPTIONS_TARGET</a> flag, or it can be a command list. Other kinds of images cannot be set as a target. For example, you cannot set the output of an effect as target. If the target is not valid the context will enter the <b>D2DERR_INVALID_TARGET </b>error state. You cannot  use <b>SetTarget</b> to render to a bitmap/command list from multiple device contexts simultaneously. An image is considered “being rendered to” if it has ever been set on a device context within a <a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-begindraw">BeginDraw</a>/<a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> timespan. If an attempt is made to render to an image through multiple device contexts, all subsequent device contexts after the first will enter an error state.</para>
            /// <para>Callers wishing to attach an image to a second device context should first call <a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> on the first device context.</para>
            /// <para>Here is an example of the correct calling order.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-settarget#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void SetTarget(ID2D1Image image);

            /// <summary>Gets the target currently associated with the device context.</summary>
            /// <param name="image">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1image">ID2D1Image</a>**</b> When this method returns, contains the address of a pointer to the target currently associated with the device context.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-gettarget#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If a target is not associated with the device context, <i>target</i> will contain <b>NULL</b> when the methods returns. If the currently selected target is a bitmap rather than a command list, the application can gain access to the initial bitmaps created by using one of the following methods: </para>
            /// <para>This doc was truncated.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-gettarget#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void GetTarget(out ID2D1Image image);

            /// <summary>
            /// Sets the rendering controls.
            /// </summary>
            /// <param name="renderingControls">The rendering controls.</param>
            [PreserveSig]
            new unsafe void SetRenderingControls(D2D1_RENDERING_CONTROLS* renderingControls);

            /// <summary>Gets the rendering controls that have been applied to the context.</summary>
            /// <param name="renderingControls">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/ns-d2d1_1-d2d1_rendering_controls">D2D1_RENDERING_CONTROLS</a>*</b> When this method returns, contains a pointer to the rendering controls for this context.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getrenderingcontrols#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getrenderingcontrols">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new unsafe void GetRenderingControls(D2D1_RENDERING_CONTROLS* renderingControls);

            /// <summary>Changes the primitive blend mode that is used for all rendering operations in the device context.</summary>
            /// <param name="primitiveBlend">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_primitive_blend">D2D1_PRIMITIVE_BLEND</a></b> The primitive blend to use.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-setprimitiveblend#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The primitive blend will apply to all of the primitive drawn on the context, unless this is overridden with the <i>compositeMode</i> parameter on the <a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-drawimage(id2d1effect_constd2d1_point_2f_constd2d1_rect_f_d2d1_interpolation_mode_d2d1_composite_mode)">DrawImage</a> API. The primitive blend applies to the interior of any primitives drawn on the context. In the case of <a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-drawimage(id2d1effect_constd2d1_point_2f_constd2d1_rect_f_d2d1_interpolation_mode_d2d1_composite_mode)">DrawImage</a>, this will be implied by the image rectangle, offset and world transform. If the primitive blend is anything other than <b>D2D1_PRIMITIVE_BLEND_SOURCE_OVER</b> then ClearType rendering will be turned off. If the application explicitly forces ClearType rendering in these modes, the drawing context will be placed in an error state. D2DERR_WRONG_STATE will be returned from either <a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> or <a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-flush">Flush</a>.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-setprimitiveblend#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void SetPrimitiveBlend(D2D1_PRIMITIVE_BLEND primitiveBlend);

            /// <summary>Returns the currently set primitive blend used by the device context.</summary>
            /// <returns>
            /// <para>Type: <b><a href="/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_primitive_blend">D2D1_PRIMITIVE_BLEND</a></b> The current primitive blend. The default value is <b>D2D1_PRIMITIVE_BLEND_SOURCE_OVER</b>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getprimitiveblend">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new D2D1_PRIMITIVE_BLEND GetPrimitiveBlend();

            /// <summary>Sets what units will be used to interpret values passed into the device context.</summary>
            /// <param name="unitMode">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_unit_mode">D2D1_UNIT_MODE</a></b> An enumeration defining how passed-in units will be interpreted by the device context.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-setunitmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This method will affect all properties and parameters affected by <a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-setdpi">SetDpi</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-getdpi">GetDpi</a>. This affects all coordinates, lengths, and other properties that are not explicitly defined as being in another unit. For example: </para>
            /// <para>This doc was truncated.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-setunitmode#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void SetUnitMode(D2D1_UNIT_MODE unitMode);

            /// <summary>Gets the mode that is being used to interpret values by the device context.</summary>
            /// <returns>
            /// <para>Type: <b><a href="/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_unit_mode">D2D1_UNIT_MODE</a></b> The  unit mode.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getunitmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new D2D1_UNIT_MODE GetUnitMode();

            /// <summary>Draws a series of glyphs to the device context.</summary>
            /// <param name="baselineOrigin">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b> Origin of first glyph in the series.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="glyphRun">
            /// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/dwrite/ns-dwrite-dwrite_glyph_run">DWRITE_GLYPH_RUN</a>*</b> The glyphs to render.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="glyphRunDescription">
            /// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/dwrite/ns-dwrite-dwrite_glyph_run_description">DWRITE_GLYPH_RUN_DESCRIPTION</a>*</b> Supplementary glyph series information.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="foregroundBrush">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The brush that defines the text color.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="measuringMode">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dcommon/ne-dcommon-dwrite_measuring_mode">DWRITE_MEASURING_MODE</a></b> The measuring mode of the glyph series, used to determine the advances and offsets. The default value is DWRITE_MEASURING_MODE_NATURAL.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The <i>glyphRunDescription</i> is ignored when rendering, but can be useful for printing and serialization of rendering commands, such as to an XPS or SVG file. This extends <a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-drawglyphrun">ID2D1RenderTarget::DrawGlyphRun</a>, which lacked the glyph run description.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new unsafe void DrawGlyphRun(D2D_POINT_2F baselineOrigin, in DWRITE_GLYPH_RUN glyphRun, [Optional] DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, ID2D1Brush foregroundBrush, DWRITE_MEASURING_MODE measuringMode);

            /// <summary>
            /// Draws the image.
            /// </summary>
            /// <param name="image">The image.</param>
            /// <param name="targetOffset">The target offset.</param>
            /// <param name="imageRectangle">The image rectangle.</param>
            /// <param name="interpolationMode">The interpolation mode.</param>
            /// <param name="compositeMode">The composite mode.</param>
            [PreserveSig]
            new unsafe void DrawImage(ID2D1Image image, [Optional] D2D_POINT_2F* targetOffset, [Optional] D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode);

            /// <summary>
            /// Draws the gdi metafile.
            /// </summary>
            /// <param name="gdiMetafile">The gdi metafile.</param>
            /// <param name="targetOffset">The target offset.</param>
            [PreserveSig]
            new unsafe void DrawGdiMetafile(ID2D1GdiMetafile gdiMetafile, [Optional] D2D_POINT_2F* targetOffset);

            /// <summary>
            /// Draws the bitmap.
            /// </summary>
            /// <param name="bitmap">The bitmap.</param>
            /// <param name="destinationRectangle">The destination rectangle.</param>
            /// <param name="opacity">The opacity.</param>
            /// <param name="interpolationMode">The interpolation mode.</param>
            /// <param name="sourceRectangle">The source rectangle.</param>
            /// <param name="perspectiveTransform">The perspective transform.</param>
            [PreserveSig]
            new unsafe void DrawBitmap(ID2D1Bitmap bitmap, [Optional] D2D_RECT_F* destinationRectangle, float opacity, D2D1_INTERPOLATION_MODE interpolationMode, [Optional] D2D_RECT_F* sourceRectangle, [Optional] D2D_MATRIX_4X4_F* perspectiveTransform);

            /// <summary>
            /// Pushes the layer.
            /// </summary>
            /// <param name="layerParameters">The layer parameters.</param>
            /// <param name="layer">The layer.</param>
            [PreserveSig]
            new void PushLayer(in D2D1_LAYER_PARAMETERS1 layerParameters, ID2D1Layer layer);

            /// <summary>This indicates that a portion of an effect's input is invalid. This method can be called many times.</summary>
            /// <param name="effect">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1effect">ID2D1Effect</a>*</b> The effect to invalidate.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-invalidateeffectinputrectangle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="input">
            /// <para>Type: <b>UINT32</b> The input index.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-invalidateeffectinputrectangle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="inputRectangle">
            /// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b> The rect to invalidate.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-invalidateeffectinputrectangle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-invalidateeffectinputrectangle">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new unsafe void InvalidateEffectInputRectangle(ID2D1Effect effect, uint input, D2D_RECT_F* inputRectangle);

            /// <summary>Gets the number of invalid output rectangles that have accumulated on the effect.</summary>
            /// <param name="effect">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1effect">ID2D1Effect</a>*</b> The effect to count the invalid rectangles on.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectinvalidrectanglecount#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="rectangleCount">
            /// <para>Type: <b>UINT32*</b> The returned rectangle count.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectinvalidrectanglecount#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectinvalidrectanglecount">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new unsafe void GetEffectInvalidRectangleCount(ID2D1Effect effect, uint* rectangleCount);

            /// <summary>Gets the invalid rectangles that have accumulated since the last time the effect was drawn and EndDraw was then called on the device context.</summary>
            /// <param name="effect">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1effect">ID2D1Effect</a>*</b> The effect to get the invalid rectangles from.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectinvalidrectangles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="rectangles">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b> An array of <a href="https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a> structures.  You must allocate this to the correct size.  You can get the count of the invalid rectangles using the <a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectinvalidrectanglecount">GetEffectInvalidRectangleCount</a> method.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectinvalidrectangles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="rectanglesCount">
            /// <para>Type: <b>UINT32</b> The number of rectangles to get.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectinvalidrectangles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectinvalidrectangles">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new unsafe void GetEffectInvalidRectangles(ID2D1Effect effect, D2D_RECT_F* rectangles, uint rectanglesCount);

            /// <summary>Returns the input rectangles that are required to be supplied by the caller to produce the given output rectangle.</summary>
            /// <param name="renderEffect">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1effect">ID2D1Effect</a>*</b> The image whose output is being rendered.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectrequiredinputrectangles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="renderImageRectangle">
            /// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b> The portion of the output image whose inputs are being inspected.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectrequiredinputrectangles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="inputDescriptions">
            /// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/ns-d2d1_1-d2d1_effect_input_description">D2D1_EFFECT_INPUT_DESCRIPTION</a>*</b> A list of the inputs whos rectangles are being queried.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectrequiredinputrectangles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="requiredInputRects">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b> The input rectangles returned to the caller.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectrequiredinputrectangles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="inputCount">
            /// <para>Type: <b>UINT32</b> The number of inputs.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectrequiredinputrectangles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> A failure code, this will typically only be because an effect in the chain returned some error.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectrequiredinputrectangles">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new unsafe void GetEffectRequiredInputRectangles(ID2D1Effect renderEffect, [Optional] D2D_RECT_F* renderImageRectangle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 4)] D2D1_EFFECT_INPUT_DESCRIPTION[] inputDescriptions, D2D_RECT_F* requiredInputRects, uint inputCount);

            /// <summary>
            /// Fills the opacity mask.
            /// </summary>
            /// <param name="opacityMask">The opacity mask.</param>
            /// <param name="brush">The brush.</param>
            /// <param name="destinationRectangle">The destination rectangle.</param>
            /// <param name="sourceRectangle">The source rectangle.</param>
            [PreserveSig]
            new unsafe void FillOpacityMask(ID2D1Bitmap opacityMask, ID2D1Brush brush, [Optional] D2D_RECT_F* destinationRectangle, [Optional] D2D_RECT_F* sourceRectangle);
            #endregion

            #region ID2D1DeviceContext1
            /// <summary>Creates a device-dependent representation of the fill of the geometry that can be subsequently rendered.</summary>
            /// <param name="geometry">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1geometry">ID2D1Geometry</a>*</b> The geometry to realize.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_2/nf-d2d1_2-id2d1devicecontext1-createfilledgeometryrealization#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="flatteningTolerance">
            /// <para>Type: <b>FLOAT</b> The flattening tolerance to use when converting Beziers to line segments. This parameter shares the same units as the coordinates of the geometry.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_2/nf-d2d1_2-id2d1devicecontext1-createfilledgeometryrealization#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="geometryRealization">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_2/nn-d2d1_2-id2d1geometryrealization">ID2D1GeometryRealization</a>**</b> When this method returns, contains the address of a pointer to a new geometry realization object.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_2/nf-d2d1_2-id2d1devicecontext1-createfilledgeometryrealization#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_2/nf-d2d1_2-id2d1devicecontext1-createfilledgeometryrealization">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new void CreateFilledGeometryRealization(ID2D1Geometry geometry, float flatteningTolerance, out ID2D1GeometryRealization geometryRealization);

            /// <summary>Creates a device-dependent representation of the stroke of a geometry that can be subsequently rendered.</summary>
            /// <param name="geometry">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1geometry">ID2D1Geometry</a>*</b> The geometry to realize.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_2/nf-d2d1_2-id2d1devicecontext1-createstrokedgeometryrealization#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="flatteningTolerance">
            /// <para>Type: <b>FLOAT </b> The flattening tolerance to use when converting Beziers to line segments. This parameter shares the same units as the coordinates of the geometry.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_2/nf-d2d1_2-id2d1devicecontext1-createstrokedgeometryrealization#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="strokeWidth">
            /// <para>Type: <b>FLOAT </b> The width of the stroke. This parameter shares the same units as the coordinates of the geometry.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_2/nf-d2d1_2-id2d1devicecontext1-createstrokedgeometryrealization#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="strokeStyle">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1strokestyle">ID2D1StrokeStyle</a>*</b> The stroke style (optional).</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_2/nf-d2d1_2-id2d1devicecontext1-createstrokedgeometryrealization#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="geometryRealization">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_2/nn-d2d1_2-id2d1geometryrealization">ID2D1GeometryRealization</a>**</b> When this method returns, contains the address of a pointer to a new geometry realization object.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_2/nf-d2d1_2-id2d1devicecontext1-createstrokedgeometryrealization#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_2/nf-d2d1_2-id2d1devicecontext1-createstrokedgeometryrealization">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            new void CreateStrokedGeometryRealization(ID2D1Geometry geometry, float flatteningTolerance, float strokeWidth, ID2D1StrokeStyle strokeStyle, out ID2D1GeometryRealization geometryRealization);

            /// <summary>Renders a given geometry realization to the target with the specified brush.</summary>
            /// <param name="geometryRealization">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_2/nn-d2d1_2-id2d1geometryrealization">ID2D1GeometryRealization</a>*</b> The geometry realization to be rendered.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_2/nf-d2d1_2-id2d1devicecontext1-drawgeometryrealization#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="brush">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The brush to render the realization with.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_2/nf-d2d1_2-id2d1devicecontext1-drawgeometryrealization#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_2/nf-d2d1_2-id2d1devicecontext1-drawgeometryrealization">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            new void DrawGeometryRealization(ID2D1GeometryRealization geometryRealization, ID2D1Brush brush);
            #endregion

            #region ID2D1DeviceContext2
            /// <summary>
            /// Creates the ink.
            /// </summary>
            /// <param name="startPoint">The start point.</param>
            /// <param name="ink">The ink.</param>
            unsafe void CreateInk(D2D1_INK_POINT* startPoint, out ID2D1Ink ink);

            /// <summary>
            /// Creates the ink style.
            /// </summary>
            /// <param name="inkStyleProperties">The ink style properties.</param>
            /// <param name="inkStyle">The ink style.</param>
            unsafe void CreateInkStyle([Optional] D2D1_INK_STYLE_PROPERTIES* inkStyleProperties, out ID2D1InkStyle inkStyle);

            /// <summary>Creates a new ID2D1GradientMesh instance using the given array of patches.</summary>
            /// <param name="patches">
            /// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d2d1_3/ns-d2d1_3-d2d1_gradient_mesh_patch">D2D1_GRADIENT_MESH_PATCH</a>*</b> A pointer to the array containing the patches to be used in this mesh.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-creategradientmesh#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="patchesCount">
            /// <para>Type: <b>UINT32</b> The number of patches in the patches argument to read.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-creategradientmesh#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="gradientMesh">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1gradientmesh">ID2D1GradientMesh</a>**</b> When this method returns, contains the address of a pointer to the new gradient mesh.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-creategradientmesh#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href="/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> S_OK if successful, otherwise a failure HRESULT.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-creategradientmesh">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            unsafe void CreateGradientMesh(D2D1_GRADIENT_MESH_PATCH* patches, uint patchesCount, out ID2D1GradientMesh gradientMesh);

            /// <summary>
            /// Creates the image source from wic.
            /// </summary>
            /// <param name="wicBitmapSource">The wic bitmap source.</param>
            /// <param name="loadingOptions">The loading options.</param>
            /// <param name="alphaMode">The alpha mode.</param>
            /// <param name="imageSource">The image source.</param>
            void CreateImageSourceFromWic(IWICBitmapSource wicBitmapSource, D2D1_IMAGE_SOURCE_LOADING_OPTIONS loadingOptions, D2D1_ALPHA_MODE alphaMode, out ID2D1ImageSourceFromWic imageSource);

            /// <summary>Creates a 3D lookup table for mapping a 3-channel input to a 3-channel output. The table data must be provided in 4-channel format.</summary>
            /// <param name="precision">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_buffer_precision">D2D1_BUFFER_PRECISION</a></b> Precision of the input lookup table data.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createlookuptable3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="extents">
            /// <para>Type: <b>const UINT32*</b> Number of lookup table elements per dimension (X, Y, Z).</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createlookuptable3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="data">
            /// <para>Type: <b>const BYTE*</b> Buffer holding the lookup table data.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createlookuptable3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="dataCount">
            /// <para>Type: <b>UINT32</b> Size of the lookup table data buffer.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createlookuptable3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="strides">
            /// <para>Type: <b>const UINT32*</b> An array containing two values.  The first value is the size in bytes from one row (X dimension) of LUT data to the next. The second value is the size in bytes from one LUT data plane (X and Y dimensions) to the next.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createlookuptable3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="lookupTable">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1lookuptable3d">ID2D1LookupTable3D</a>**</b> Receives the new lookup table instance.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createlookuptable3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href="/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> S_OK if successful, otherwise a failure HRESULT.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createlookuptable3d">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            unsafe void CreateLookupTable3D(D2D1_BUFFER_PRECISION precision, uint* extents, byte* data, uint dataCount, uint* strides, out ID2D1LookupTable3D lookupTable);

            /// <summary>Creates an image source from a set of DXGI surface(s). The YCbCr surface(s) are converted to RGBA automatically during subsequent drawing.</summary>
            /// <param name="surfaces">
            /// <para>Type: [in] <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgisurface">IDXGISurface</a>**</b> The DXGI surfaces to create the image source from.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createimagesourcefromdxgi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="surfaceCount">
            /// <para>Type: <b>UINT32</b> The number of surfaces provided; must be between one and three.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createimagesourcefromdxgi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="colorSpace">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgicommon/ne-dxgicommon-dxgi_color_space_type">DXGI_COLOR_SPACE_TYPE</a></b> The color space of the input.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createimagesourcefromdxgi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="options">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_3/ne-d2d1_3-d2d1_image_source_from_dxgi_options">D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS</a></b> Options controlling color space conversions.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createimagesourcefromdxgi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="imageSource">
            /// <para>Type: [out] <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1imagesource">ID2D1ImageSource</a>**</b> Receives the new image source instance.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createimagesourcefromdxgi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href="/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> S_OK if successful, otherwise a failure HRESULT.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createimagesourcefromdxgi">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            void CreateImageSourceFromDxgi([MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 1)] Dxgi.IDXGISurface[] surfaces, uint surfaceCount, Dxgi.Common.DXGI_COLOR_SPACE_TYPE colorSpace, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS options, out ID2D1ImageSource imageSource);

            /// <summary>Returns the world bounds of a given gradient mesh.</summary>
            /// <param name="gradientMesh">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1gradientmesh">ID2D1GradientMesh</a>*</b> The gradient mesh whose world bounds will be calculated.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-getgradientmeshworldbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="pBounds">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b> When this method returns, contains a pointer to the bounds of the gradient mesh, in device independent pixels (DIPs).</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-getgradientmeshworldbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href="/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> S_OK if successful, otherwise a failure HRESULT.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-getgradientmeshworldbounds">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            unsafe void GetGradientMeshWorldBounds(ID2D1GradientMesh gradientMesh, D2D_RECT_F* pBounds);

            /// <summary>Renders the given ink object using the given brush and ink style.</summary>
            /// <param name="ink">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1ink">ID2D1Ink</a>*</b> The ink object to be rendered.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-drawink#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="brush">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b> The brush with which to render the ink object.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-drawink#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="inkStyle">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1inkstyle">ID2D1InkStyle</a>*</b> The ink style to use when rendering the ink object.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-drawink#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-drawink">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            void DrawInk(ID2D1Ink ink, ID2D1Brush brush, ID2D1InkStyle inkStyle);

            /// <summary>Renders a given gradient mesh to the target.</summary>
            /// <param name="gradientMesh">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1gradientmesh">ID2D1GradientMesh</a>*</b> The gradient mesh to be rendered.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-drawgradientmesh#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-drawgradientmesh">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig]
            void DrawGradientMesh(ID2D1GradientMesh gradientMesh);

            /// <summary>
            /// Draws the gdi metafile.
            /// </summary>
            /// <param name="gdiMetafile">The gdi metafile.</param>
            /// <param name="destinationRectangle">The destination rectangle.</param>
            /// <param name="sourceRectangle">The source rectangle.</param>
            [PreserveSig]
            unsafe void DrawGdiMetafile(ID2D1GdiMetafile gdiMetafile, [Optional] D2D_RECT_F* destinationRectangle, [Optional] D2D_RECT_F* sourceRectangle);

            /// <summary>Creates an image source which shares resources with an original.</summary>
            /// <param name="imageSource">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1imagesource">ID2D1ImageSource</a>*</b> The original image.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createtransformedimagesource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="properties">
            /// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d2d1_3/ns-d2d1_3-d2d1_transformed_image_source_properties">D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES</a>*</b> Properties for the source image.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createtransformedimagesource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name="transformedImageSource">
            /// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1transformedimagesource">ID2D1TransformedImageSource</a>**</b> Receives the new image source.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createtransformedimagesource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href="/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> If this method succeeds, it returns <b xmlns:loc="http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns:loc="http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createtransformedimagesource">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            unsafe void CreateTransformedImageSource(ID2D1ImageSource imageSource, D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES* properties, out ID2D1TransformedImageSource transformedImageSource);
            #endregion
        }
    }
}